package com.ijoomer.components.jomsocial;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.util.DisplayMetrics;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.ProgressBar;
import android.widget.SeekBar;

import com.androidquery.AQuery;
import com.androidquery.callback.AjaxCallback;
import com.androidquery.callback.AjaxStatus;
import com.ijoomer.common.classes.IjoomerSuperMaster;
import com.ijoomer.common.classes.IjoomerUtilities;
import com.ijoomer.common.classes.ViewHolder;
import com.ijoomer.common.configuration.IjoomerApplicationConfiguration;
import com.ijoomer.custom.interfaces.PhotoTagListener;
import com.ijoomer.customviews.IjoomerButton;
import com.ijoomer.customviews.IjoomerTextView;
import com.ijoomer.customviews.PhotoTagView;
import com.ijoomer.library.jomsocial.JomGalleryDataProvider;
import com.ijoomer.src.R;
import com.ijoomer.weservice.WebCallListener;
import com.smart.framework.CustomAlertNeutral;
import com.smart.framework.ItemView;
import com.smart.framework.SmartActivity;
import com.smart.framework.SmartListAdapterWithHolder;
import com.smart.framework.SmartListItem;

public class JomPhotoTagDetailFragment extends Fragment implements JomTagHolder {

	private LinearLayout listFooter;
	private LinearLayout lnrTagOptions;
	private ListView lstTagUser;
	private IjoomerButton btnAddTag;
	private IjoomerButton btnRemoveTag;
	private IjoomerButton btnDoneTag;
	private PopupWindow dialog;
	private ProgressBar pbrImage;
	private ProgressBar pbrTag;
	private ImageView imgTagClose;
	private View v;

	private AQuery androidQuery;
	private PhotoTagView imgPhotoDetail;
	private ArrayList<SmartListItem> tagListData = new ArrayList<SmartListItem>();
	private ArrayList<HashMap<String, String>> tagList;
	private HashMap<String, String> photoData;
	private SmartListAdapterWithHolder tagAdapter;

	private JomGalleryDataProvider provider;
	private JomGalleryDataProvider tagDataProvider;

	private String tagPosition;

	public JomPhotoTagDetailFragment(HashMap<String, String> photoData) {
		androidQuery = new AQuery(getActivity());
		this.photoData = photoData;
	}

	public JomPhotoTagDetailFragment() {
	}

	/**
	 * Overrides method
	 */

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		v = inflater.inflate(R.layout.jom_photo_tag_detail_image_item, null);
		initComponents();
		return v;
	}

	public void initComponents() {
		provider = new JomGalleryDataProvider(getActivity());
		tagDataProvider = new JomGalleryDataProvider(getActivity());
		imgPhotoDetail = (PhotoTagView) v.findViewById(R.id.imgPhotoDetail);
		pbrImage = (ProgressBar) v.findViewById(R.id.pbrImage);
		btnAddTag = (IjoomerButton) v.findViewById(R.id.btnAddTag);
		btnRemoveTag = (IjoomerButton) v.findViewById(R.id.btnRemoveTag);
		btnDoneTag = (IjoomerButton) v.findViewById(R.id.btnDoneTag);
		lnrTagOptions = (LinearLayout) v.findViewById(R.id.lnrTagOptions);

		pbrImage.setVisibility(View.VISIBLE);
		imgPhotoDetail.setTagLabelResource(R.drawable.tag_label);

		androidQuery.ajax(photoData.get("url"), Bitmap.class, 0, new AjaxCallback<Bitmap>() {
			@Override
			public void callback(String url, Bitmap object, AjaxStatus status) {
				super.callback(url, object, status);
				pbrImage.setVisibility(View.GONE);
				imgPhotoDetail.setImageBitmap(object);

			}
		});

		imgPhotoDetail.setPhotoTagListener(new PhotoTagListener() {

			@Override
			public void onTagedItemClicked(int position, Object data) {
				((JomMasterActivity) getActivity()).gotoProfile(tagList.get(position).get(USER_ID));
			}

			@Override
			public void onAddNewTag(String rectPosition) {
				tagPosition = rectPosition;
				showPhotoTagOrRemoveDialog(false);
			}

			@Override
			public void showTagOptions() {
				lnrTagOptions.setVisibility(View.VISIBLE);
				if (imgPhotoDetail.getTagedUserList() != null && imgPhotoDetail.getTagedUserList().size() > 0) {
					btnRemoveTag.setVisibility(View.VISIBLE);
				} else {
					btnRemoveTag.setVisibility(View.GONE);
				}
			}

			@Override
			public void onTagAreaConflict() {
				IjoomerUtilities.getCustomOkDialog(getString(R.string.dialog_title_tag_user), getString(R.string.dialog_photo_tag_error), getString(R.string.ok),
						R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

							@Override
							public void NeutralMathod() {

							}
						});
			}
		});

		btnAddTag.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				if (btnAddTag.getText().toString().equals(getString(R.string.add_tag_manual))) {
					imgPhotoDetail.setAddTag();
					JomPhotoTagActivity.viewPager.setScrollable(false);
					btnAddTag.setText(getString(R.string.select_tag_user));
				} else {
					imgPhotoDetail.addNewTag();
				}

			}
		});
		btnRemoveTag.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				showPhotoTagOrRemoveDialog(true);
			}
		});
		btnDoneTag.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				imgPhotoDetail.setShowTag();
				imgPhotoDetail.setTagingDone(true);
				JomPhotoTagActivity.viewPager.setScrollable(true);
				btnAddTag.setText(getString(R.string.add_tag_manual));
			}
		});

		loadPhotoTags();

	}

	/**
	 * Class method
	 */

	private void responseErrorMessageHandler(int responseCode) {
		IjoomerUtilities.getCustomOkDialog(getString(R.string.dialog_title_tag_user),
				getString(getResources().getIdentifier("code" + responseCode, "string", getActivity().getPackageName())), getString(R.string.ok), R.layout.ijoomer_ok_dialog,
				new CustomAlertNeutral() {

					@Override
					public void NeutralMathod() {

					}
				});
	}

	private void loadPhotoTags() {
		provider.getPhotoTages(photoData.get("id"), new WebCallListener() {

			@Override
			public void onProgressUpdate(int progressCount) {
			}

			@Override
			public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
				tagList = data1;
				imgPhotoDetail.setTagedUserList(data1);
			}
		});
	}

	private void showPhotoTagOrRemoveDialog(final boolean isRemoveTag) {
		try {

			int popupWidth = getActivity().getWindowManager().getDefaultDisplay().getWidth() - convertSizeToDeviceDependent(50);
			int popupHeight = getActivity().getWindowManager().getDefaultDisplay().getHeight() - convertSizeToDeviceDependent(200);

			listFooter = (LinearLayout) LayoutInflater.from(getActivity()).inflate(R.layout.ijoomer_list_footer, null);
			LayoutInflater layoutInflater = (LayoutInflater) getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			View layout = layoutInflater.inflate(R.layout.jom_photo_video_tag_dialog, null);

			dialog = new PopupWindow(getActivity());
			dialog.setContentView(layout);
			dialog.setWidth(popupWidth);
			dialog.setHeight(popupHeight);
			dialog.setFocusable(true);
			dialog.setBackgroundDrawable(new BitmapDrawable());
			dialog.showAtLocation(layout, Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL, 0, 0);

			imgTagClose = (ImageView) layout.findViewById(R.id.imgTagClose);
			lstTagUser = (ListView) layout.findViewById(R.id.lstTagUser);
			pbrTag = (ProgressBar) layout.findViewById(R.id.pbrTag);
			lstTagUser.addFooterView(listFooter, null, false);
			lstTagUser.setAdapter(null);
			lstTagUser.setOnScrollListener(new OnScrollListener() {

				@Override
				public void onScrollStateChanged(AbsListView view, int scrollState) {

				}

				@Override
				public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
					if ((!isRemoveTag) && (firstVisibleItem + visibleItemCount) >= totalItemCount && totalItemCount > 1) {
						listFooter.setVisibility(View.VISIBLE);
						tagDataProvider.getFriendsForTagPhoto(photoData.get("id"), new WebCallListener() {

							@Override
							public void onProgressUpdate(int progressCount) {

							}

							@Override
							public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
								listFooter.setVisibility(View.GONE);
								if (responseCode == 200) {
									prepareTagList(data1, isRemoveTag, true);
								} else {
									responseErrorMessageHandler(responseCode);
								}
							}
						});
					}
				}
			});

			imgTagClose.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {
					dialog.dismiss();
				}
			});
			if (!isRemoveTag) {
				tagDataProvider.restorePagingSettings();
				tagDataProvider.getFriendsForTagPhoto(photoData.get("id"), new WebCallListener() {

					@Override
					public void onProgressUpdate(int progressCount) {

					}

					@Override
					public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
						if (responseCode == 200) {
							IjoomerApplicationConfiguration.setReloadRequired(true);
							prepareTagList(data1, isRemoveTag, false);
							tagAdapter = getTagListAdapter();
							lstTagUser.setAdapter(tagAdapter);
						} else {
							IjoomerUtilities.getCustomOkDialog(getString(R.string.dialog_title_tag_user),
									getString(getResources().getIdentifier("code" + responseCode, "string", getActivity().getPackageName())), getString(R.string.ok),
									R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

										@Override
										public void NeutralMathod() {
											dialog.dismiss();
										}
									});
						}
						pbrTag.setVisibility(View.GONE);
					}
				});
			} else {
				pbrTag.setVisibility(View.GONE);
				prepareTagList(tagList, isRemoveTag, false);
				tagAdapter = getTagListAdapter();
				lstTagUser.setAdapter(tagAdapter);
			}

		} catch (Throwable e) {
			e.printStackTrace();
		}
	}

	public int convertSizeToDeviceDependent(int value) {

		DisplayMetrics dm = new DisplayMetrics();
		getActivity().getWindowManager().getDefaultDisplay().getMetrics(dm);
		return ((dm.densityDpi * value) / 160);
	}

	private void prepareTagList(ArrayList<HashMap<String, String>> data, boolean isRemoveTag, boolean append) {

		if (data != null) {

			if (isRemoveTag) {
				tagListData.clear();
				for (HashMap<String, String> hashMap : data) {
					SmartListItem item = new SmartListItem();
					item.setItemLayout(R.layout.jom_photo_video_tag_dialog_item);
					ArrayList<Object> obj = new ArrayList<Object>();
					hashMap.put("taged", "true");
					obj.add(hashMap);
					item.setValues(obj);
					tagListData.add(item);
				}
			} else {
				if (!append) {
					tagListData.clear();
				}
				for (HashMap<String, String> hashMap : data) {
					SmartListItem item = new SmartListItem();
					item.setItemLayout(R.layout.jom_photo_video_tag_dialog_item);
					ArrayList<Object> obj = new ArrayList<Object>();
					obj.add(hashMap);
					item.setValues(obj);
					if (append) {
						tagAdapter.add(item);
					} else {
						tagListData.add(item);
					}
				}

			}
		}

	}

	/**
	 * List adapter
	 * 
	 * @return
	 */

	private SmartListAdapterWithHolder getTagListAdapter() {

		SmartListAdapterWithHolder adapterWithHolder = new SmartListAdapterWithHolder(getActivity(), R.layout.jom_photo_video_tag_dialog_item, tagListData, new ItemView() {
			@Override
			public View setItemView(final int position, View v, SmartListItem item, ViewHolder holder) {
				holder.txtPhotoTagUser = (IjoomerTextView) v.findViewById(R.id.txtPhotoTagUser);
				holder.btnPhotoTag = (IjoomerButton) v.findViewById(R.id.btnPhotoTag);
				holder.btnRemovePhotoTag = (IjoomerButton) v.findViewById(R.id.btnRemovePhotoTag);

				final HashMap<String, String> row = (HashMap<String, String>) item.getValues().get(0);

				if (row.containsKey(TAGED) && row.get(DELETEALLOWED).equals("1")) {
					holder.btnPhotoTag.setVisibility(View.GONE);
					holder.btnRemovePhotoTag.setVisibility(View.VISIBLE);
				} else if (!row.containsKey(TAGED)) {
					holder.btnPhotoTag.setVisibility(View.VISIBLE);
					holder.btnRemovePhotoTag.setVisibility(View.GONE);
				}

				holder.txtPhotoTagUser.setText(row.get(USER_NAME));

				holder.txtPhotoTagUser.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View v) {
						if (row.get(USER_PROFILE).equals("1")) {
							((JomMasterActivity) getActivity()).gotoProfile(row.get(USER_ID));
						}
					}
				});

				holder.btnPhotoTag.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View v) {

						dialog.dismiss();
						provider.addPhotoTag(photoData.get(ID), row.get(USER_ID), tagPosition, new WebCallListener() {
							final SeekBar proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));

							@Override
							public void onProgressUpdate(int progressCount) {

							}

							@Override
							public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
								btnAddTag.setText(getString(R.string.add_tag_manual));
								if (responseCode == 200) {

									provider.getPhotoTages(photoData.get(ID), new WebCallListener() {

										@Override
										public void onProgressUpdate(int progressCount) {
											proSeekBar.setProgress(progressCount);
										}

										@Override
										public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
											JomPhotoTagActivity.viewPager.setScrollable(true);
											if (responseCode == 200) {
												tagList = data1;
											}
											imgPhotoDetail.setTagedUserList(tagList);
											imgPhotoDetail.setShowTag();

										}
									});
								} else {
									proSeekBar.setProgress(100);
									imgPhotoDetail.setShowTag();
									IjoomerUtilities.getCustomOkDialog(getString(R.string.dialog_title_tag_user),
											getString(getResources().getIdentifier("code" + responseCode, "string", getActivity().getPackageName())), getString(R.string.ok),
											R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

												@Override
												public void NeutralMathod() {
													if (dialog != null && dialog.isShowing()) {
														dialog.dismiss();
													}

												}
											});
								}
							}
						});
					}
				});
				holder.btnRemovePhotoTag.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View v) {
						if (dialog != null && dialog.isShowing()) {
							dialog.dismiss();
						}
						provider.removePhotoTag(row.get(ID), new WebCallListener() {
							final SeekBar proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));

							@Override
							public void onProgressUpdate(int progressCount) {
								proSeekBar.setProgress(progressCount);
							}

							@Override
							public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
								if (responseCode == 200) {
									tagList.remove(position);
								} else {
									responseErrorMessageHandler(responseCode);
								}
								imgPhotoDetail.setShowTag();
								imgPhotoDetail.setTagedUserList(tagList);
							}
						});
					}
				});
				return v;
			}

			@Override
			public View setItemView(int position, View v, SmartListItem item) {
				return null;
			}
		});
		return adapterWithHolder;
	}

}
