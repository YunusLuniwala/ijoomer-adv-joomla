package com.ijoomer.components.jomsocial;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Color;
import android.location.Address;
import android.net.Uri;
import android.provider.MediaStore;
import android.text.Editable;
import android.text.Html;
import android.text.TextWatcher;
import android.text.method.LinkMovementMethod;
import android.text.method.ScrollingMovementMethod;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RadioGroup;
import android.widget.SeekBar;
import android.widget.Spinner;
import android.widget.TextView.BufferType;

import com.androidquery.AQuery;
import com.ijoomer.common.classes.IJoomerTwitterShareActivity;
import com.ijoomer.common.classes.IjoomerUtilities;
import com.ijoomer.common.classes.ViewHolder;
import com.ijoomer.common.configuration.IjoomerApplicationConfiguration;
import com.ijoomer.common.configuration.IjoomerGlobalConfiguration;
import com.ijoomer.custom.interfaces.SelectImageDialogListner;
import com.ijoomer.custom.interfaces.ShareListner;
import com.ijoomer.customviews.IjoomerButton;
import com.ijoomer.customviews.IjoomerEditText;
import com.ijoomer.customviews.IjoomerTextView;
import com.ijoomer.library.jomsocial.JomGalleryDataProvider;
import com.ijoomer.map.IjoomerMapAddress;
import com.ijoomer.media.player.IjoomerMediaPlayer;
import com.ijoomer.src.R;
import com.ijoomer.weservice.WebCallListener;
import com.smart.framework.CustomAlertNeutral;
import com.smart.framework.ItemView;
import com.smart.framework.SmartListAdapterWithHolder;
import com.smart.framework.SmartListItem;

public class JomVideoActivity extends JomMasterActivity {

	private LinearLayout lnrVideoHeader;
	private LinearLayout listFooter;
	private ListView lstVideo;
	private LinearLayout lnrVideoSearch;
	private LinearLayout lnrCreateVideo;
	private LinearLayout lnrVideo;
	private LinearLayout lnrUploadVideo;
	private LinearLayout lnrLinkVideo;
	private IjoomerTextView txtAllVideos;
	private IjoomerTextView txtMyVideos;
	private IjoomerTextView txtAddVideos;
	private IjoomerTextView txtVideoWhoCanSee;
	private IjoomerTextView txtUploadVideo;
	private IjoomerTextView txtLinkVideo;
	private IjoomerEditText editSearch;
	private IjoomerEditText edtVideoTitle;
	private IjoomerEditText edtVideoDescription;
	private IjoomerEditText edtVideoLocation;
	private IjoomerEditText edtVideoCaption;
	private IjoomerEditText edtVideoFile;
	private IjoomerEditText edtVideoLink;
	private IjoomerButton btnAddVideo;
	private IjoomerButton btnBrowse;
	private IjoomerButton btnCancle;
	private IjoomerButton btnUpload;
	private ImageView imgSearch;
	private ImageView imgMap;
	private Spinner spnVideoCategory;
	private Spinner spnWhoCanSee;
	private SeekBar proSeekBar;

	private AQuery androidQuery;
	ArrayList<SmartListItem> listData = new ArrayList<SmartListItem>();
	private ArrayList<HashMap<String, String>> categoryList;
	private ArrayList<HashMap<String, String>> myVideoList;
	private ArrayList<HashMap<String, String>> allVideoList;
	private ArrayList<String> categories;
	private HashMap<String, String> currentVideo;
	private SmartListAdapterWithHolder adapter;

	private JomGalleryDataProvider providerMyVideos;
	private JomGalleryDataProvider providerAllVideos;
	private JomGalleryDataProvider providerSearchVideo;
	private JomGalleryDataProvider provider;

	final private String ALLVIDEOS = "allvideos";
	final private String MYVIDEOS = "myvideos";
	final private int GET_ADDRESS_FROM_MAP = 1;
	private String IN_USERID;
	private String IN_GROUP_ID;
	private String IN_GROUP_ADD_VIDEO;
	private String IN_PROFILE;
	private String currentList = MYVIDEOS;
	private String videoPath;
	private String address = "";
	private boolean isVideoPlay;
	private int PICK_VIDEO;
	private int TAKE_VIDEO;

	/**
	 * Overrides method
	 */

	@Override
	public int setLayoutId() {
		return R.layout.jom_video;
	}

	@Override
	public void initComponents() {

		listFooter = (LinearLayout) LayoutInflater.from(this).inflate(R.layout.ijoomer_list_footer, null);
		lstVideo = (ListView) findViewById(R.id.lstVideo);
		lnrVideoHeader = (LinearLayout) findViewById(R.id.lnrVideoHeader);
		lstVideo.addFooterView(listFooter, null, false);
		lstVideo.setAdapter(null);
		lnrVideoSearch = (LinearLayout) findViewById(R.id.lnrVideoSearch);
		lnrCreateVideo = (LinearLayout) findViewById(R.id.lnrCreateVideo);
		lnrVideo = (LinearLayout) findViewById(R.id.lnrVideo);
		lnrUploadVideo = (LinearLayout) findViewById(R.id.lnrUploadVideo);
		lnrLinkVideo = (LinearLayout) findViewById(R.id.lnrLinkVideo);
		txtAllVideos = (IjoomerTextView) findViewById(R.id.txtAllVideos);
		txtMyVideos = (IjoomerTextView) findViewById(R.id.txtMyVideos);
		txtAddVideos = (IjoomerTextView) findViewById(R.id.txtAddVideos);
		txtVideoWhoCanSee = (IjoomerTextView) findViewById(R.id.txtVideoWhoCanSee);
		txtUploadVideo = (IjoomerTextView) findViewById(R.id.txtUploadVideo);
		txtLinkVideo = (IjoomerTextView) findViewById(R.id.txtLinkVideo);
		editSearch = (IjoomerEditText) findViewById(R.id.editSearch);
		edtVideoFile = (IjoomerEditText) findViewById(R.id.edtVideoFile);
		edtVideoFile.setHint(String.format(getString(R.string.videos_select_file), IjoomerGlobalConfiguration.getVideoUploadSize()));
		edtVideoTitle = (IjoomerEditText) findViewById(R.id.edtVideoTitle);
		edtVideoLocation = (IjoomerEditText) findViewById(R.id.edtVideoLocation);
		edtVideoDescription = (IjoomerEditText) findViewById(R.id.edtVideoDescription);
		edtVideoCaption = (IjoomerEditText) findViewById(R.id.edtVideoCaption);
		edtVideoLink = (IjoomerEditText) findViewById(R.id.edtVideoLink);
		btnAddVideo = (IjoomerButton) findViewById(R.id.btnAddVideo);
		btnCancle = (IjoomerButton) findViewById(R.id.btnCancle);
		btnUpload = (IjoomerButton) findViewById(R.id.btnUpload);
		btnBrowse = (IjoomerButton) findViewById(R.id.btnBrowse);
		imgSearch = (ImageView) findViewById(R.id.imgSearch);
		imgMap = (ImageView) findViewById(R.id.imgMap);
		spnWhoCanSee = (Spinner) findViewById(R.id.spnWhoCanSee);
		spnVideoCategory = (Spinner) findViewById(R.id.spnVideoCategory);

		androidQuery = new AQuery(this);
		categoryList = new ArrayList<HashMap<String, String>>();
		categories = new ArrayList<String>();

		providerMyVideos = new JomGalleryDataProvider(this);
		providerAllVideos = new JomGalleryDataProvider(this);
		providerSearchVideo = new JomGalleryDataProvider(this);
		provider = new JomGalleryDataProvider(this);

		getIntentData();

	}

	@Override
	public void prepareViews() {

		if (!IN_PROFILE.equals("0")) {
			if (!IjoomerGlobalConfiguration.isVideoUpload()) {
				txtLinkVideo.setTextColor(Color.parseColor(getString(R.color.blue)));
				lnrLinkVideo.setVisibility(View.VISIBLE);
				txtUploadVideo.setVisibility(View.GONE);
				if (!IN_GROUP_ID.equals("0")) {
					txtVideoWhoCanSee.setVisibility(View.GONE);
					spnWhoCanSee.setVisibility(View.GONE);
				}
				lnrUploadVideo.setVisibility(View.GONE);
				edtVideoTitle.setVisibility(View.GONE);
				edtVideoDescription.setVisibility(View.GONE);
			}
			lnrCreateVideo.setVisibility(View.VISIBLE);
			lnrVideo.setVisibility(View.GONE);
			lnrVideoHeader.setVisibility(View.GONE);
			try {

				new Thread(new Runnable() {

					@Override
					public void run() {
						try {
							address = IjoomerUtilities.getAddressFromLatLong(0, 0).getSubAdminArea();
						} catch (Exception e) {
						}

						runOnUiThread(new Runnable() {

							@Override
							public void run() {
								edtVideoLocation.setText(address);
							}
						});
					}
				}).start();
			} catch (Throwable e) {
			}
			spnWhoCanSee.setAdapter(new IjoomerUtilities.MyCustomAdapter(this, new ArrayList<String>(Arrays.asList(getResources().getStringArray(R.array.wall_post_type)))));
			providerMyVideos.getVideoCategoryList(new WebCallListener() {

				@Override
				public void onProgressUpdate(int progressCount) {
				}

				@Override
				public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
					if (responseCode == 200) {
						updateHeader(providerMyVideos.getNotificationData());
						categoryList.addAll(data1);
						for (HashMap<String, String> hashMap : data1) {
							categories.add(hashMap.get(NAME));
						}
						spnVideoCategory.setAdapter(new IjoomerUtilities.MyCustomAdapter(JomVideoActivity.this, categories));
					} else {
						responseErrorMessageHandler(responseCode, true);
					}

				}
			});

		} else {
			edtVideoCaption.setVisibility(View.GONE);
			spnWhoCanSee.setAdapter(new IjoomerUtilities.MyCustomAdapter(this, new ArrayList<String>(Arrays.asList(getResources().getStringArray(R.array.wall_post_type)))));
			txtMyVideos.setTextColor(getResources().getColor(R.color.blue));

			if (!IN_GROUP_ADD_VIDEO.equals("0")) {
				btnAddVideo.setVisibility(View.VISIBLE);
			}

			if (!IN_GROUP_ID.equals("0")) {
				lnrVideoSearch.setVisibility(View.GONE);
				currentList = ALLVIDEOS;
				getGroupVideo(true);
			} else {
				IN_GROUP_ID = "0";
				IN_GROUP_ADD_VIDEO = "0";
				lnrVideoHeader.setVisibility(View.VISIBLE);
				getCategories(true);
			}
		}
	}

	@Override
	protected void onResume() {
		super.onResume();
		if (isVideoPlay) {
			isVideoPlay = false;
			try {
				loadNew(JomVideoDetailsActivity.class, JomVideoActivity.this, false, "IN_USERID", IN_USERID, "IN_VIDEO_DETAILS", currentVideo, "IN_GROUPID", IN_GROUP_ID);
			} catch (Throwable e) {
				e.printStackTrace();
			}
		} else if (!IN_GROUP_ID.equals("0")) {
			if (IjoomerApplicationConfiguration.isReloadRequired()) {
				if (myVideoList != null) {
					myVideoList.clear();
				}
				if (allVideoList != null) {
					allVideoList.clear();
				}
				IjoomerApplicationConfiguration.setReloadRequired(false);
				providerAllVideos.restorePagingSettings();
				getGroupVideo(false);
			}
		} else {
			if (IjoomerApplicationConfiguration.isReloadRequired()) {
				IjoomerApplicationConfiguration.setReloadRequired(false);
				providerAllVideos.restorePagingSettings();
				providerMyVideos.restorePagingSettings();

				if (myVideoList != null) {
					myVideoList.clear();
				}
				if (allVideoList != null) {
					allVideoList.clear();
				}
				if (currentList.equals(ALLVIDEOS)) {
					getCategoryVideo(false, "0");
				} else if (currentList.equals(MYVIDEOS)) {
					getMyVideo(false);
				}
			}
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (resultCode == Activity.RESULT_OK) {

			if (requestCode == PICK_VIDEO) {
				videoPath = getAbsolutePath(data.getData());
				edtVideoFile.setText(videoPath);
				if ((new File(videoPath).length() / (1024 * 1024)) > IjoomerGlobalConfiguration.getVideoUploadSize()) {
					IjoomerUtilities.getCustomOkDialog(getString(R.string.video), getString(R.string.video_select_size_limit_exceeded), getString(R.string.ok),
							R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

								@Override
								public void NeutralMathod() {
									edtVideoFile.setText(null);
								}
							});
				}
			} else if (requestCode == TAKE_VIDEO) {
				videoPath = getAbsolutePath(data.getData());
				edtVideoFile.setText(videoPath);
				if ((new File(videoPath).length() / (1024 * 1024)) > IjoomerGlobalConfiguration.getVideoUploadSize()) {
					IjoomerUtilities.getCustomOkDialog(getString(R.string.video), getString(R.string.video_select_size_limit_exceeded), getString(R.string.ok),
							R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

								@Override
								public void NeutralMathod() {
									edtVideoFile.setText(null);
								}
							});
				}
			}
			if (requestCode == GET_ADDRESS_FROM_MAP) {
				edtVideoLocation.setText(((HashMap<String, String>) data.getSerializableExtra("MAP_ADDRESSS_DATA")).get("address"));
			} else {
				super.onActivityResult(requestCode, resultCode, data);
			}

		}
	}

	@Override
	public void setActionListeners() {

		imgMap.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				Intent intent = new Intent(JomVideoActivity.this, IjoomerMapAddress.class);
				startActivityForResult(intent, GET_ADDRESS_FROM_MAP);
			}
		});

		lstVideo.setOnScrollListener(new OnScrollListener() {

			@Override
			public void onScrollStateChanged(AbsListView view, int scrollState) {

			}

			@Override
			public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
				if ((firstVisibleItem + visibleItemCount) >= totalItemCount && totalItemCount > 1) {
					if (editSearch.getVisibility() == View.VISIBLE && editSearch.getText().toString().trim().length() > 0) {
						if (!providerSearchVideo.isCalling() && providerSearchVideo.hasNextPage()) {
							listFooterVisible();
							providerSearchVideo.getSearchVideo(editSearch.getText().toString().trim(), new WebCallListener() {

								@Override
								public void onProgressUpdate(int progressCount) {
								}

								@Override
								public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
									listFooterInvisible();
									if (responseCode == 200) {
										updateHeader(providerSearchVideo.getNotificationData());
										prepareList(data1, true);
									} else {
										responseErrorMessageHandler(responseCode, false);
									}
								}
							});
						}
					} else if (currentList.equals(ALLVIDEOS)) {
						if (!providerAllVideos.isCalling() && providerAllVideos.hasNextPage()) {
							listFooterVisible();
							providerAllVideos.getAllVideo("0", IN_GROUP_ID, new WebCallListener() {

								@Override
								public void onProgressUpdate(int progressCount) {
								}

								@Override
								public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
									listFooterInvisible();
									if (responseCode == 200) {
										updateHeader(providerAllVideos.getNotificationData());
										prepareList(data1, true);
									} else {
										responseErrorMessageHandler(responseCode, false);
									}
								}
							});
						}

					} else if (currentList.equals(MYVIDEOS)) {
						if (!providerMyVideos.isCalling() && providerMyVideos.hasNextPage()) {
							listFooterVisible();
							providerMyVideos.getSearchVideo(editSearch.getText().toString().trim(), new WebCallListener() {

								@Override
								public void onProgressUpdate(int progressCount) {
								}

								@Override
								public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
									listFooterInvisible();
									if (responseCode == 200) {
										updateHeader(providerMyVideos.getNotificationData());
										prepareList(data1, true);
									} else {
										responseErrorMessageHandler(responseCode, false);
									}
								}
							});
						}
					}
				}
			}
		});

		imgSearch.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				hideSoftKeyboard();
				if (editSearch.getText().toString().trim().length() > 0) {
					getSearchVideo(editSearch.getText().toString().trim());
				} else {
					editSearch.setError(getString(R.string.validation_value_required));
				}
			}
		});
		editSearch.addTextChangedListener(new TextWatcher() {

			@Override
			public void onTextChanged(CharSequence c, int arg1, int arg2, int count) {

			}

			@Override
			public void beforeTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {
			}

			@Override
			public void afterTextChanged(Editable edit) {
				if (edit.length() == 0) {
					hideSoftKeyboard();
					if (currentList.equals(ALLVIDEOS)) {
						setHeaderTextColor();
						if (allVideoList.size() > 0) {
							prepareList(allVideoList, false);
							adapter = getListAdapter();
							lstVideo.setAdapter(adapter);
						} else {
							providerAllVideos.restorePagingSettings();
							getCategoryVideo(true, "0");
						}
					} else {
						setHeaderTextColor();
						if (myVideoList.size() > 0) {
							prepareList(myVideoList, false);
							adapter = getListAdapter();
							lstVideo.setAdapter(adapter);
						} else {
							providerMyVideos.restorePagingSettings();
							getMyVideo(true);
						}
					}

				}
			}
		});

		btnBrowse.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				IjoomerUtilities.selectImageDialog(new SelectImageDialogListner() {

					@Override
					public void onPhoneGallery() {
						try {
							Intent intent = new Intent();
							intent.setType("video/*");
							intent.setAction(Intent.ACTION_GET_CONTENT);
							startActivityForResult(Intent.createChooser(intent, "Select Video"), PICK_VIDEO);

						} catch (Exception e) {
						}
					}

					@Override
					public void onCapture() {
						try {
							Intent takeVideoIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
							startActivityForResult(takeVideoIntent, TAKE_VIDEO);
						} catch (Exception e) {
						}
					}
				});
			}
		});
		txtUploadVideo.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				txtLinkVideo.setTextColor(Color.parseColor(getString(R.color.txt_color)));
				txtUploadVideo.setTextColor(Color.parseColor(getString(R.color.blue)));
				lnrLinkVideo.setVisibility(View.GONE);
				lnrUploadVideo.setVisibility(View.VISIBLE);
				if (!IN_GROUP_ID.equals("0")) {
					txtVideoWhoCanSee.setVisibility(View.GONE);
					spnWhoCanSee.setVisibility(View.GONE);
				}
				edtVideoTitle.setVisibility(View.VISIBLE);
				edtVideoDescription.setVisibility(View.VISIBLE);
			}
		});
		txtLinkVideo.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				txtLinkVideo.setTextColor(Color.parseColor(getString(R.color.blue)));
				txtUploadVideo.setTextColor(Color.parseColor(getString(R.color.txt_color)));
				lnrLinkVideo.setVisibility(View.VISIBLE);
				if (!IN_GROUP_ID.equals("0")) {
					txtVideoWhoCanSee.setVisibility(View.GONE);
					spnWhoCanSee.setVisibility(View.GONE);
				}
				lnrUploadVideo.setVisibility(View.GONE);
				edtVideoTitle.setVisibility(View.GONE);
				edtVideoDescription.setVisibility(View.GONE);
			}
		});

		txtAddVideos.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				if (lnrCreateVideo.getVisibility() == View.GONE) {

					if (!IjoomerGlobalConfiguration.isVideoUpload()) {
						txtLinkVideo.setTextColor(Color.parseColor(getString(R.color.blue)));
						txtUploadVideo.setTextColor(Color.parseColor(getString(R.color.txt_color)));
						lnrLinkVideo.setVisibility(View.VISIBLE);
						if (!IN_GROUP_ID.equals("0")) {
							txtVideoWhoCanSee.setVisibility(View.GONE);
							spnWhoCanSee.setVisibility(View.GONE);
						}
						lnrUploadVideo.setVisibility(View.GONE);
						edtVideoTitle.setVisibility(View.GONE);
						edtVideoDescription.setVisibility(View.GONE);
						lnrCreateVideo.setVisibility(View.VISIBLE);
						txtUploadVideo.setVisibility(View.GONE);
						lnrVideo.setVisibility(View.GONE);
					} else {
						txtAllVideos.setTextColor(getResources().getColor(R.color.txt_color));
						txtMyVideos.setTextColor(getResources().getColor(R.color.txt_color));
						txtAddVideos.setTextColor(getResources().getColor(R.color.blue));
						edtVideoTitle.setText(null);
						edtVideoDescription.setText(null);
						edtVideoFile.setText(null);
						edtVideoLink.setText(null);
						try {

							new Thread(new Runnable() {

								@Override
								public void run() {
									try {
										address = IjoomerUtilities.getAddressFromLatLong(0, 0).getSubAdminArea();
									} catch (Exception e) {
									}

									runOnUiThread(new Runnable() {

										@Override
										public void run() {
											edtVideoLocation.setText(address);
										}
									});
								}
							}).start();
						} catch (Throwable e) {
						}
						lnrCreateVideo.setVisibility(View.VISIBLE);
						lnrVideo.setVisibility(View.GONE);
					}
				} else {
					lnrCreateVideo.setVisibility(View.GONE);
					lnrVideo.setVisibility(View.VISIBLE);
					setHeaderTextColor();
				}

			}
		});

		btnAddVideo.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				edtVideoTitle.setText(null);
				edtVideoDescription.setText(null);
				edtVideoFile.setText(null);
				edtVideoLink.setText(null);
				try {

					new Thread(new Runnable() {

						@Override
						public void run() {
							try {
								address = IjoomerUtilities.getAddressFromLatLong(0, 0).getSubAdminArea();
							} catch (Exception e) {
							}

							runOnUiThread(new Runnable() {

								@Override
								public void run() {
									edtVideoLocation.setText(address);
								}
							});
						}
					}).start();
				} catch (Throwable e) {
				}
				lnrCreateVideo.setVisibility(View.VISIBLE);
				txtVideoWhoCanSee.setVisibility(View.GONE);
				spnWhoCanSee.setVisibility(View.GONE);
				lnrVideo.setVisibility(View.GONE);
			}
		});

		btnUpload.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				hideSoftKeyboard();
				if (lnrUploadVideo.getVisibility() == View.VISIBLE) {
					boolean validationFlag = true;

					if (edtVideoFile.getText().toString().trim().length() <= 0) {
						validationFlag = false;
						edtVideoFile.setError(getString(R.string.validation_value_required));
					}
					if (edtVideoTitle.getText().toString().trim().length() <= 0) {
						edtVideoTitle.setError(getString(R.string.validation_value_required));
						validationFlag = false;
					}

					if (validationFlag) {
						final SeekBar proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request),
								IjoomerUtilities.readableFileSize(new File(edtVideoFile.getText().toString()).length()));
						Address address = IjoomerUtilities.getLatLongFromAddress(edtVideoLocation.getText().toString().trim());
						providerAllVideos.uploadVideo(IN_GROUP_ID, edtVideoFile.getText().toString().trim(), edtVideoTitle.getText().toString().trim(), edtVideoDescription
								.getText().toString().trim(), edtVideoCaption.getText().toString(), address != null ? address.getLatitude() : 0,
								address != null ? address.getLongitude() : 0, getCategoryId(spnVideoCategory.getSelectedItemPosition()), !IN_GROUP_ID.equals("0") ? null
										: getPrivacyCode(spnWhoCanSee.getSelectedItem().toString().trim()).toString(), new WebCallListener() {

									@Override
									public void onProgressUpdate(int progressCount) {
										proSeekBar.setProgress(progressCount);
									}

									@Override
									public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {

										if (responseCode == 200) {
											updateHeader(providerAllVideos.getNotificationData());
											IjoomerUtilities.getCustomOkDialog(getString(R.string.video), getString(R.string.video_upload_successfully), getString(R.string.ok),
													R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

														@Override
														public void NeutralMathod() {
															if (!IN_PROFILE.equals("0")) {
																finish();
															} else {
																lnrCreateVideo.setVisibility(View.GONE);
																lnrVideo.setVisibility(View.VISIBLE);
																setHeaderTextColor();
																providerAllVideos.restorePagingSettings();
																providerMyVideos.restorePagingSettings();
																if (!IN_GROUP_ID.equals("0")) {
																	getGroupVideo(false);
																} else {
																	if (myVideoList != null) {
																		myVideoList.clear();
																	}
																	if (allVideoList != null) {
																		allVideoList.clear();
																	}
																	if (currentList.equals(ALLVIDEOS)) {
																		getCategoryVideo(false, categoryList.get(0).get(ID));
																	} else if (currentList.equals(MYVIDEOS)) {
																		getMyVideo(true);
																	}
																}
															}
														}
													});

										} else {
											responseErrorMessageHandler(responseCode, false);
										}
									}

								});
					}

				} else {
					if (edtVideoLink.getText().toString().trim().length() <= 0) {
						edtVideoLink.setError(getString(R.string.validation_value_required));
					} else {
						final SeekBar proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
						Address address = IjoomerUtilities.getLatLongFromAddress(edtVideoLocation.getText().toString().trim());
						providerAllVideos.linkVideo(IN_GROUP_ID, edtVideoLink.getText().toString().trim(), edtVideoCaption.getText().toString().trim(),
								address != null ? address.getLatitude() : 0, address != null ? address.getLongitude() : 0,
								getCategoryId(spnVideoCategory.getSelectedItemPosition()),
								!IN_GROUP_ID.equals("0") ? null : getPrivacyCode(spnWhoCanSee.getSelectedItem().toString().trim()).toString(), new WebCallListener() {

									@Override
									public void onProgressUpdate(int progressCount) {
										proSeekBar.setProgress(progressCount);
									}

									@Override
									public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {

										if (responseCode == 200) {
											updateHeader(providerAllVideos.getNotificationData());

											IjoomerUtilities.getCustomOkDialog(getString(R.string.video), getString(R.string.video_upload_successfully), getString(R.string.ok),
													R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

														@Override
														public void NeutralMathod() {
															if (!IN_PROFILE.equals("0")) {
																finish();
															} else {
																lnrCreateVideo.setVisibility(View.GONE);
																lnrVideo.setVisibility(View.VISIBLE);
																setHeaderTextColor();
																providerAllVideos.restorePagingSettings();
																providerMyVideos.restorePagingSettings();
																if (!IN_GROUP_ID.equals("0")) {
																	getGroupVideo(false);
																} else {
																	if (myVideoList != null) {
																		myVideoList.clear();
																	}
																	if (allVideoList != null) {
																		allVideoList.clear();
																	}
																	if (currentList.equals(ALLVIDEOS)) {
																		getCategoryVideo(false, categoryList.get(0).get(ID));
																	} else if (currentList.equals(MYVIDEOS)) {
																		getMyVideo(true);
																	}
																}
															}
														}
													});

										} else {
											responseErrorMessageHandler(responseCode, false);
										}
									}

								});
					}
				}

			}
		});
		btnCancle.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {

				if (!IN_PROFILE.equals("0")) {
					finish();
				} else {
					lnrCreateVideo.setVisibility(View.GONE);
					lnrVideo.setVisibility(View.VISIBLE);
					setHeaderTextColor();
				}
			}
		});

		txtMyVideos.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				if (!providerAllVideos.isCalling()) {
					if (!currentList.equals(MYVIDEOS) || lnrCreateVideo.getVisibility() == View.VISIBLE) {
						lnrCreateVideo.setVisibility(View.GONE);
						lnrVideo.setVisibility(View.VISIBLE);
						currentList = MYVIDEOS;
						setHeaderTextColor();

						if (myVideoList != null && myVideoList.size() > 0) {
							prepareList(myVideoList, false);
							adapter = getListAdapter();
							lstVideo.setAdapter(adapter);
						} else {
							providerMyVideos.restorePagingSettings();
							getMyVideo(true);
						}

					}
				}
			}
		});

		txtAllVideos.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				if (!providerMyVideos.isCalling()) {
					if (!currentList.equals(ALLVIDEOS) || lnrCreateVideo.getVisibility() == View.VISIBLE) {
						lnrCreateVideo.setVisibility(View.GONE);
						lnrVideo.setVisibility(View.VISIBLE);
						currentList = ALLVIDEOS;
						setHeaderTextColor();
						if (allVideoList != null && allVideoList.size() > 0) {
							prepareList(allVideoList, false);
							adapter = getListAdapter();
							lstVideo.setAdapter(adapter);
						} else {
							providerAllVideos.restorePagingSettings();
							getCategoryVideo(true, "0");
						}

					}
				}
			}

		});

	}

	@Override
	public void onCheckedChanged(RadioGroup arg0, int arg1) {

	}

	/**
	 * Class method
	 */

	private void getIntentData() {
		IN_USERID = getIntent().getStringExtra("IN_USERID") == null ? "0" : getIntent().getStringExtra("IN_USERID");
		IN_GROUP_ID = getIntent().getStringExtra("IN_GROUP_ID") == null ? "0" : getIntent().getStringExtra("IN_GROUP_ID");
		IN_GROUP_ADD_VIDEO = getIntent().getStringExtra("IN_GROUP_ADD_VIDEO") == null ? "0" : getIntent().getStringExtra("IN_GROUP_ADD_VIDEO");
		IN_PROFILE = getIntent().getStringExtra("IN_PROFILE") == null ? "0" : getIntent().getStringExtra("IN_PROFILE");
	}

	private void responseErrorMessageHandler(final int responseCode, final boolean finishActivityOnConnectionProblem) {
		IjoomerUtilities.getCustomOkDialog(getString(R.string.video), getString(getResources().getIdentifier("code" + responseCode, "string", getPackageName())),
				getString(R.string.ok), R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

					@Override
					public void NeutralMathod() {
						if (responseCode == 599 && finishActivityOnConnectionProblem) {
							finish();
						}
					}
				});
	}

	private void setHeaderTextColor() {
		if (currentList.equals(ALLVIDEOS)) {
			txtAllVideos.setTextColor(getResources().getColor(R.color.blue));
			txtMyVideos.setTextColor(getResources().getColor(R.color.txt_color));
			txtAddVideos.setTextColor(getResources().getColor(R.color.txt_color));
		} else {
			txtAllVideos.setTextColor(getResources().getColor(R.color.txt_color));
			txtMyVideos.setTextColor(getResources().getColor(R.color.blue));
			txtAddVideos.setTextColor(getResources().getColor(R.color.txt_color));
		}
	}

	private void getCategories(final boolean isProgressShow) {

		if (isProgressShow) {
			proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
		}
		providerMyVideos.getVideoCategoryList(new WebCallListener() {

			@Override
			public void onProgressUpdate(int progressCount) {
				if (isProgressShow) {
					if (progressCount <= 95)
						proSeekBar.setProgress(progressCount);
				}
			}

			@Override
			public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
				if (responseCode == 200) {
					updateHeader(providerMyVideos.getNotificationData());
					categoryList.addAll(data1);
					for (HashMap<String, String> hashMap : data1) {
						categories.add(hashMap.get(NAME));
					}
					spnVideoCategory.setAdapter(new IjoomerUtilities.MyCustomAdapter(JomVideoActivity.this, categories));
					providerMyVideos.getMyVideo(IN_USERID, new WebCallListener() {

						@Override
						public void onProgressUpdate(int progressCount) {
							if (progressCount > 95)
								proSeekBar.setProgress(progressCount);
						}

						@Override
						public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
							if (responseCode == 200) {
								updateHeader(providerMyVideos.getNotificationData());
								myVideoList = data1;
								prepareList(myVideoList, false);
								adapter = getListAdapter();
								lstVideo.setAdapter(adapter);
							} else {
								if (responseCode == 204 && allVideoList == null) {
									getCategoryVideo(true, "0");
									currentList = ALLVIDEOS;
									setHeaderTextColor();

									if (responseCode == 204) {
										listData.clear();
										if (adapter != null) {
											adapter.notifyDataSetChanged();
										}
									}
									IjoomerUtilities.getCustomOkDialog(getString(R.string.video),
											getString(getResources().getIdentifier("code" + responseCode, "string", getPackageName())), getString(R.string.ok),
											R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {
												@Override
												public void NeutralMathod() {
													currentList = ALLVIDEOS;
													setHeaderTextColor();
												}
											});
								}
							}
						}
					});
				} else {
					responseErrorMessageHandler(responseCode, true);
				}

			}
		});

	}

	private void getGroupVideo(final boolean isProgressShow) {

		if (isProgressShow) {
			proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
		}
		providerAllVideos.getVideoCategoryList(new WebCallListener() {

			@Override
			public void onProgressUpdate(int progressCount) {
				if (isProgressShow) {
					if (progressCount <= 95)
						proSeekBar.setProgress(progressCount);
				}
			}

			@Override
			public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
				if (responseCode == 200) {
					updateHeader(providerAllVideos.getNotificationData());
					categoryList.addAll(data1);
					for (HashMap<String, String> hashMap : data1) {
						categories.add(hashMap.get(NAME));
					}
					spnVideoCategory.setAdapter(new IjoomerUtilities.MyCustomAdapter(JomVideoActivity.this, categories));
					providerAllVideos.getAllVideo("0", IN_GROUP_ID, new WebCallListener() {

						@Override
						public void onProgressUpdate(int progressCount) {
							if (progressCount > 95)
								proSeekBar.setProgress(progressCount);
						}

						@Override
						public void onCallComplete(final int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
							if (responseCode == 200) {
								updateHeader(providerAllVideos.getNotificationData());
								allVideoList = data1;
								prepareList(allVideoList, false);
								adapter = getListAdapter();
								lstVideo.setAdapter(adapter);
							} else {
								if (responseCode == 204) {
									try {
										listData.clear();
										adapter.notifyDataSetChanged();
									} catch (Exception e) {
									}

								}
								IjoomerUtilities.getCustomOkDialog(getString(R.string.video),
										getString(getResources().getIdentifier("code" + responseCode, "string", getPackageName())), getString(R.string.ok),
										R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {
											@Override
											public void NeutralMathod() {
												if (responseCode == 204) {
													if (!IN_GROUP_ID.equals("0") && !IN_GROUP_ADD_VIDEO.equals("0")) {
														edtVideoTitle.setText(null);
														edtVideoDescription.setText(null);
														edtVideoFile.setText(null);
														edtVideoLink.setText(null);
														try {

															new Thread(new Runnable() {

																@Override
																public void run() {
																	try {
																		address = IjoomerUtilities.getAddressFromLatLong(0, 0).getSubAdminArea();
																	} catch (Exception e) {
																	}

																	runOnUiThread(new Runnable() {

																		@Override
																		public void run() {
																			edtVideoLocation.setText(address);
																		}
																	});
																}
															}).start();
														} catch (Throwable e) {
														}
														lnrCreateVideo.setVisibility(View.VISIBLE);
														txtVideoWhoCanSee.setVisibility(View.GONE);
														spnWhoCanSee.setVisibility(View.GONE);
														lnrVideo.setVisibility(View.GONE);
													} else if (!IN_GROUP_ID.equals("0")) {
														finish();
													}
												}
											}
										});
							}
						}
					});
				} else {
					responseErrorMessageHandler(responseCode, true);
				}

			}
		});

	}

	private void getMyVideo(final boolean isProgressShow) {

		if (isProgressShow) {
			proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
		}
		providerMyVideos.getMyVideo(IN_USERID, new WebCallListener() {

			@Override
			public void onProgressUpdate(int progressCount) {
				if (isProgressShow) {
					proSeekBar.setProgress(progressCount);
				}
			}

			@Override
			public void onCallComplete(final int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
				if (responseCode == 200) {
					updateHeader(providerMyVideos.getNotificationData());
					myVideoList = data1;
					prepareList(myVideoList, false);
					adapter = getListAdapter();
					lstVideo.setAdapter(adapter);
				} else {
					if (responseCode == 204) {
						listData.clear();
						adapter.notifyDataSetChanged();
					}
					IjoomerUtilities.getCustomOkDialog(getString(R.string.video), getString(getResources().getIdentifier("code" + responseCode, "string", getPackageName())),
							getString(R.string.ok), R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

								@Override
								public void NeutralMathod() {

									lnrCreateVideo.setVisibility(View.GONE);
									lnrVideo.setVisibility(View.VISIBLE);
									setHeaderTextColor();
								}
							});
				}
			}
		});

	}

	private void getSearchVideo(final String query) {
		providerSearchVideo.restorePagingSettings();
		providerSearchVideo.getSearchVideo(query, new WebCallListener() {

			@Override
			public void onProgressUpdate(int progressCount) {
			}

			@Override
			public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
				if (responseCode == 200) {
					updateHeader(providerSearchVideo.getNotificationData());
					prepareList(data1, false);
					adapter = getListAdapter();
					lstVideo.setAdapter(adapter);
				} else {
					if (responseCode == 204) {
						listData.clear();
						adapter.notifyDataSetChanged();
					}
					IjoomerUtilities.getCustomOkDialog(getString(R.string.video), getString(getResources().getIdentifier("code" + responseCode, "string", getPackageName())),
							getString(R.string.ok), R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

								@Override
								public void NeutralMathod() {
									lnrCreateVideo.setVisibility(View.GONE);
									lnrVideo.setVisibility(View.VISIBLE);
									setHeaderTextColor();
								}
							});
				}
			}
		});
	}

	private void getCategoryVideo(final boolean isProgressShow, final String catgoryID) {

		if (isProgressShow) {
			proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
		}
		providerAllVideos.getAllVideo(catgoryID, IN_GROUP_ID, new WebCallListener() {

			@Override
			public void onProgressUpdate(int progressCount) {
				if (isProgressShow) {
					proSeekBar.setProgress(progressCount);
				}
			}

			@Override
			public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
				if (responseCode == 200) {
					updateHeader(providerAllVideos.getNotificationData());
					allVideoList = data1;
					prepareList(allVideoList, false);
					adapter = getListAdapter();
					lstVideo.setAdapter(adapter);
				} else {
					responseErrorMessageHandler(responseCode, false);
				}
			}
		});

	}

	private String getCategoryId(int categoryIndex) {

		return categoryList.get(categoryIndex).get(ID);

	}

	public void listFooterVisible() {
		listFooter.setVisibility(View.VISIBLE);
	}

	public void listFooterInvisible() {
		listFooter.setVisibility(View.GONE);
	}

	public void prepareList(ArrayList<HashMap<String, String>> data, boolean append) {

		if (data != null) {
			if (!append) {
				listData.clear();
			}
			for (HashMap<String, String> hashMap : data) {
				SmartListItem item = new SmartListItem();
				item.setItemLayout(R.layout.jom_video_list_item);
				ArrayList<Object> obj = new ArrayList<Object>();
				obj.add(hashMap);
				item.setValues(obj);
				if (append) {
					adapter.add(item);
				} else {
					listData.add(item);
				}
			}

		}
	}

	/**
	 * List adapter
	 */
	private SmartListAdapterWithHolder getListAdapter() {

		adapter = new SmartListAdapterWithHolder(JomVideoActivity.this, R.layout.jom_video_list_item, listData, new ItemView() {

			@SuppressWarnings("unchecked")
			@Override
			public View setItemView(final int position, View v, SmartListItem item, final ViewHolder holder) {

				holder.imgVideoAvatar = (ImageView) v.findViewById(R.id.imgVideoAvatar);
				holder.imgVideoArrow = (ImageView) v.findViewById(R.id.imgVideoArrow);
				holder.txtVideoTitle = (IjoomerTextView) v.findViewById(R.id.txtVideoTitle);
				holder.txtVideoBy = (IjoomerTextView) v.findViewById(R.id.txtVideoBy);

				holder.txtVideoDateLocation = (IjoomerTextView) v.findViewById(R.id.txtVideoDateLocation);
				holder.txtVideoLikeCount = (IjoomerTextView) v.findViewById(R.id.txtVideoLikeCount);
				holder.txtVideoDislikeCount = (IjoomerTextView) v.findViewById(R.id.txtVideoDislikeCount);
				holder.txtVideoCommentCount = (IjoomerTextView) v.findViewById(R.id.txtVideoCommentCount);
				holder.txtVideoShare = (IjoomerTextView) v.findViewById(R.id.txtVideoShare);

				final HashMap<String, String> row = (HashMap<String, String>) item.getValues().get(0);

				androidQuery.id(holder.imgVideoAvatar).image(row.get(THUMB), true, true, getDeviceWidth(), 0);

				holder.txtVideoTitle.setText(row.get(CAPTION));
				holder.txtVideoBy.setText(row.get(USER_NAME));
				holder.txtVideoLikeCount.setText(row.get(LIKES));
				holder.txtVideoDislikeCount.setText(row.get(DISLIKES));
				holder.txtVideoCommentCount.setText(row.get(COMMENTCOUNT));

				holder.txtVideoBy.setMovementMethod(LinkMovementMethod.getInstance());
				holder.txtVideoBy.setText(addClickablePart(Html.fromHtml(row.get(USER_NAME)), row), BufferType.SPANNABLE);

				holder.txtVideoDateLocation.setMovementMethod(new ScrollingMovementMethod());
				if (row.get(LOCATION).trim().length() <= 0) {
					holder.txtVideoDateLocation.setText(row.get(DATE));
				} else {
					holder.txtVideoDateLocation.setText(row.get(DATE) + " @ " + row.get(LOCATION));
				}

				holder.imgVideoAvatar.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View v) {

						if (!row.get(URL).toString().contains("youtube")) {
							Intent lVideoIntent = new Intent(null, Uri.parse("mp4://" + row.get(URL).toString()), JomVideoActivity.this, IjoomerMediaPlayer.class);
							isVideoPlay = true;
							currentVideo = row;
							startActivity(lVideoIntent);

						} else {
							isVideoPlay = true;
							currentVideo = row;
							Intent lVideoIntent = new Intent(null, Uri.parse("ytv://" + row.get(URL).toString().split("=")[1] + ""), JomVideoActivity.this,
									IjoomerMediaPlayer.class);
							startActivity(lVideoIntent);

						}

					}
				});
				holder.imgVideoArrow.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View v) {
						try {
							loadNew(JomVideoDetailsActivity.class, JomVideoActivity.this, false, "IN_USERID", IN_USERID, "IN_VIDEO_DETAILS", row, "IN_GROUPID", IN_GROUP_ID);
						} catch (Throwable e) {
							e.printStackTrace();
						}

					}
				});
				holder.txtVideoTitle.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View v) {
						try {
							loadNew(JomVideoDetailsActivity.class, JomVideoActivity.this, false, "IN_USERID", IN_USERID, "IN_VIDEO_DETAILS", row, "IN_GROUPID", IN_GROUP_ID);
						} catch (Throwable e) {
							e.printStackTrace();
						}

					}
				});
				holder.txtVideoLikeCount.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View arg0) {
						if (row.get(LIKED).equals("1")) {
							provider.unlikeVideo(row.get(ID), new WebCallListener() {

								@Override
								public void onProgressUpdate(int progressCount) {

								}

								@Override
								public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
									if (responseCode == 200) {
										updateHeader(provider.getNotificationData());
										row.put(LIKED, "0");
										row.put(LIKES, String.valueOf(Integer.parseInt(row.get(LIKES)) - 1));
										holder.txtVideoLikeCount.setText(row.get(LIKES));
									} else {
										responseErrorMessageHandler(responseCode, false);
									}
								}
							});
						} else {
							provider.likeVideo(row.get(ID), new WebCallListener() {

								@Override
								public void onProgressUpdate(int progressCount) {

								}

								@Override
								public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
									if (responseCode == 200) {
										updateHeader(provider.getNotificationData());
										row.put(LIKED, "1");
										row.put(LIKES, String.valueOf(Integer.parseInt(row.get(LIKES)) + 1));
										holder.txtVideoLikeCount.setText(row.get(LIKES));
										if (row.get(DISLIKED).equals("1")) {
											row.put(DISLIKES, String.valueOf(Integer.parseInt(row.get(DISLIKES)) - 1));
											row.put(DISLIKED, "0");
											holder.txtVideoDislikeCount.setText(row.get(DISLIKES));
										}
									} else {
										responseErrorMessageHandler(responseCode, false);
									}
								}
							});
						}
					}
				});

				holder.txtVideoDislikeCount.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View arg0) {

						if (row.get(DISLIKED).equals("1")) {
							provider.unlikeVideo(row.get(ID), new WebCallListener() {

								@Override
								public void onProgressUpdate(int progressCount) {

								}

								@Override
								public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
									if (responseCode == 200) {
										updateHeader(provider.getNotificationData());
										row.put(DISLIKED, "0");
										row.put(DISLIKES, String.valueOf(Integer.parseInt(row.get(DISLIKES)) - 1));
										holder.txtVideoDislikeCount.setText(row.get(DISLIKES));
									} else {
										responseErrorMessageHandler(responseCode, false);
									}
								}
							});
						} else {
							provider.dislikeVideo(row.get(ID), new WebCallListener() {

								@Override
								public void onProgressUpdate(int progressCount) {

								}

								@Override
								public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
									if (responseCode == 200) {
										updateHeader(provider.getNotificationData());
										row.put(DISLIKED, "1");
										row.put(DISLIKES, String.valueOf(Integer.parseInt(row.get(DISLIKES)) + 1));
										holder.txtVideoDislikeCount.setText(row.get(DISLIKES));
										if (row.get(LIKED).equals("1")) {
											row.put(LIKES, String.valueOf(Integer.parseInt(row.get(LIKES)) - 1));
											row.put(LIKED, "0");
											holder.txtVideoLikeCount.setText(row.get(LIKES));
										}
									} else {
										responseErrorMessageHandler(responseCode, false);
									}
								}
							});
						}
					}
				});

				holder.txtVideoCommentCount.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View arg0) {
						try {
							loadNew(JomVideoDetailsActivity.class, JomVideoActivity.this, false, "IN_USERID", IN_USERID, "IN_VIDEO_DETAILS", row, "IN_GROUPID", IN_GROUP_ID);
						} catch (Throwable e) {
							e.printStackTrace();
						}
					}
				});
				holder.txtVideoShare.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View arg0) {

						IjoomerUtilities.getShareDialog(new ShareListner() {
							@Override
							public void onClick(String shareOn, Object value, String message) {
								if (shareOn.equals("email")) {
									String[] to = value.toString().split(",");
									Intent i = new Intent(Intent.ACTION_SEND);
									i.setType("text/html");
									i.putExtra(Intent.EXTRA_EMAIL, to);
									i.putExtra(Intent.EXTRA_SUBJECT, getString(R.string.share_email_subject));
									i.putExtra(Intent.EXTRA_TEXT, Html.fromHtml(IjoomerUtilities.prepareEmailBody(message == null ? "" : message, getSmartApplication()
											.readSharedPreferences().getString(SP_USERNAME, "")
											+ " "
											+ getString(R.string.saw_this_story_on_the)
											+ " "
											+ getString(R.string.app_name) + " " + getString(R.string.thought_you_should_see_it), row.get(CAPTION), row.get(DESCRIPTION), row
											.get(SHARELINK), getString(R.string.try_ijoomeradvance))));
									try {
										startActivity(Intent.createChooser(i, "Send mail..."));
									} catch (android.content.ActivityNotFoundException ex) {
										ting(getString(R.string.share_email_no_client));
									}
								} else if (shareOn.equals("facebook")) {
									facebookSharing(row.get(CAPTION), row.get(CAPTION), row.get(DESCRIPTION), row.get(SHARELINK), row.get(THUMB), message == null ? "" : message);
								} else if (shareOn.equals("twitter")) {
									try {
										loadNew(IJoomerTwitterShareActivity.class, JomVideoActivity.this, false, "IN_TWIT_MESSAGE",
												message == null ? "" : message + " \n " + row.get(SHARELINK), "IN_TWIT_IMAGE", row.get(THUMB));
									} catch (Throwable e) {
										e.printStackTrace();
									}
								}
							}
						});

					}
				});

				return v;
			}

			@Override
			public View setItemView(int position, View v, SmartListItem item) {
				return null;
			}
		});
		return adapter;
	}

}
