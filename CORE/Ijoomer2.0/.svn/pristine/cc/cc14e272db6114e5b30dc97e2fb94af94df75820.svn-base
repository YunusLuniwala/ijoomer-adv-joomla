package com.ijoomer.components.jomsocial;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Color;
import android.text.method.ScrollingMovementMethod;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.SeekBar;

import com.ijoomer.common.classes.IjoomerUtilities;
import com.ijoomer.common.configuration.IjoomerApplicationConfiguration;
import com.ijoomer.common.configuration.IjoomerGlobalConfiguration;
import com.ijoomer.customviews.IjoomerTextView;
import com.ijoomer.library.jomsocial.JomGalleryDataProvider;
import com.ijoomer.src.R;
import com.ijoomer.weservice.WebCallListener;

public class JomUplodPhotosActivity extends JomMasterActivity {

	private LinearLayout lnrForm;
	private LayoutInflater mInflater;
	private IjoomerTextView txtRetry;
	private IjoomerTextView txtTotalProgressCount;

	ArrayList<String> retryList = new ArrayList<String>();

	private static String[] IN_PHOTOPATHS;
	private String IN_ALBUMID;
	private static int counter = 0;
	private static boolean hasProblem = false;

	/**
	 * Overrides method
	 */

	@Override
	public int setLayoutId() {
		return R.layout.jom_upload_multiple_photos;
	}

	@Override
	public void initComponents() {
		counter = 0;
		txtRetry = (IjoomerTextView) findViewById(R.id.txtRetry);
		lnrForm = (LinearLayout) findViewById(R.id.lnrForm);
		txtTotalProgressCount = (IjoomerTextView) findViewById(R.id.txtTotalProgressCount);
		IN_PHOTOPATHS = getIntent().getStringExtra("IN_PHOTOPATHS").split("\\|");
		IN_ALBUMID = getIntent().getStringExtra("IN_ALBUMID");
		txtTotalProgressCount.setText((counter) + "/" + IN_PHOTOPATHS.length);
		mInflater = LayoutInflater.from(this);
	}

	@Override
	public void prepareViews() {
		int size = IN_PHOTOPATHS.length;
		for (int i = 0; i < size; i++) {
			lnrForm.addView(addItem(IN_PHOTOPATHS[i]));
		}
		for (int i = 0; i < size; i++) {
			try {
				uploasPhoto(i, lnrForm.getChildAt(i), IN_PHOTOPATHS[i]);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public void setActionListeners() {
		txtRetry.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				txtRetry.setVisibility(View.GONE);
				lnrForm.removeAllViews();
				IN_PHOTOPATHS = new String[retryList.size()];
				int size = retryList.size();
				for (int i = 0; i < size; i++) {
					IN_PHOTOPATHS[i] = retryList.get(i);
				}
				counter = 0;
				txtTotalProgressCount.setText((0) + "/" + IN_PHOTOPATHS.length);
				retryList.clear();
				int len = IN_PHOTOPATHS.length;
				for (int i = 0; i < len; i++) {
					lnrForm.addView(addItem(IN_PHOTOPATHS[i]));
				}
				for (int i = 0; i < len; i++) {
					try {
						uploasPhoto(i, lnrForm.getChildAt(i), IN_PHOTOPATHS[i]);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
		});
	}

	@Override
	public void onBackPressed() {
		Intent intent = new Intent();
		intent.putExtra("IN_PHOTO_UPLOAD_COUNT", counter);
		if (counter > 0) {
			IjoomerApplicationConfiguration.setReloadRequired(true);
		}
		setResult(Activity.RESULT_OK, intent);
		finish();
		super.onBackPressed();
	}

	/**
	 * Class method
	 */

	private View addItem(String path) {
		View v = mInflater.inflate(R.layout.jom_upload_multiple_photo_item, null);
		ImageView imgPhoto = (ImageView) v.findViewById(R.id.imgPhoto);
		imgPhoto.setImageBitmap(decodeFile(path));
		SeekBar seekProgress = (SeekBar) v.findViewById(R.id.seekProgress);
		seekProgress.setOnTouchListener(new OnTouchListener() {
			@Override
			public boolean onTouch(View v, MotionEvent event) {
				return true;
			}
		});
		return v;

	}

	private void uploasPhoto(final int index, final View item, final String path) {

		final View v = item;
		final SeekBar seekProgressU = (SeekBar) v.findViewById(R.id.seekProgress);
		final IjoomerTextView txtStatusU = (IjoomerTextView) v.findViewById(R.id.txtStatus);
		final IjoomerTextView txtProgressCountU = (IjoomerTextView) v.findViewById(R.id.txtProgressCount);
		final IjoomerTextView txtErrorMessage = (IjoomerTextView) v.findViewById(R.id.txtErrorMessage);
		txtErrorMessage.setMovementMethod(new ScrollingMovementMethod());
		final IjoomerTextView txtSize = (IjoomerTextView) v.findViewById(R.id.txtSize);
		txtSize.setText(getString(R.string.size) + " : " + IjoomerUtilities.readableFileSize(new File(path).length()));

		if ((new File(path).length() / (1024 * 1024)) > IjoomerGlobalConfiguration.getPhotoUploadSize()) {
			txtErrorMessage.setText(getString(R.string.photo_select_size_limit_exceeded));
		} else {
			new JomGalleryDataProvider(JomUplodPhotosActivity.this).uploadPhoto(path, IN_ALBUMID, new WebCallListener() {

				@Override
				public void onProgressUpdate(final int progressCount) {

					runOnUiThread(new Runnable() {

						@Override
						public void run() {

							txtStatusU.setText("Uploading");
							if (progressCount >= 100) {
								txtProgressCountU.setText("" + 99 + "%");
								seekProgressU.setProgress(99);
							} else {
								txtProgressCountU.setText("" + progressCount + "%");
								seekProgressU.setProgress(progressCount);
							}
						}
					});
				}

				@Override
				public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {

					if (responseCode == 200) {
						txtStatusU.setText("Complete");
						txtStatusU.setTextColor(Color.parseColor(getString(R.color.white)));
						seekProgressU.setProgress(100);
						txtProgressCountU.setText("100%");
						txtTotalProgressCount.setText((++counter) + "/" + IN_PHOTOPATHS.length);
					} else {
						if (responseCode == 416) {
							hasProblem = true;
						}
						if (hasProblem) {
							if (errorMessage.trim().length() > 0) {
								txtErrorMessage.setText(errorMessage);
							} else {
								txtErrorMessage.setText(getString(getResources().getIdentifier("code" + responseCode, "string", getPackageName())));
							}
							txtErrorMessage.setVisibility(View.VISIBLE);
							txtErrorMessage.setMovementMethod(new ScrollingMovementMethod());
						} else {
							if (errorMessage != null && errorMessage.trim().length() > 0) {
								txtErrorMessage.setText(errorMessage);
							} else {
								txtErrorMessage.setText(getString(getResources().getIdentifier("code" + responseCode, "string", getPackageName())));
							}
							txtErrorMessage.setVisibility(View.VISIBLE);
							txtErrorMessage.setMovementMethod(new ScrollingMovementMethod());
						}

						txtStatusU.setText("Failed");
						txtStatusU.setTextColor(Color.RED);
						if (responseCode != 416) {
							retryList.add(IN_PHOTOPATHS[index]);
							txtRetry.setVisibility(View.VISIBLE);
						}
					}
				}
			});
		}
	}

}
