package com.ijoomer.components.jomsocial;

import java.util.ArrayList;
import java.util.HashMap;

import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RadioGroup;
import android.widget.SeekBar;

import com.androidquery.AQuery;
import com.ijoomer.common.classes.IjoomerUtilities;
import com.ijoomer.common.classes.ViewHolder;
import com.ijoomer.common.configuration.IjoomerApplicationConfiguration;
import com.ijoomer.common.configuration.IjoomerGlobalConfiguration;
import com.ijoomer.customviews.IjoomerButton;
import com.ijoomer.customviews.IjoomerEditText;
import com.ijoomer.customviews.IjoomerTextView;
import com.ijoomer.library.jomsocial.JomGroupDataProvider;
import com.ijoomer.src.R;
import com.ijoomer.weservice.WebCallListener;
import com.smart.framework.CustomAlertNeutral;
import com.smart.framework.ItemView;
import com.smart.framework.SmartListAdapterWithHolder;
import com.smart.framework.SmartListItem;

public class JomGroupActivity extends JomMasterActivity {

	private LinearLayout listFooter;
	private ListView lstGroup;
	private IjoomerTextView txtGroupAll;
	private IjoomerTextView txtGroupMy;
	private IjoomerTextView txtGroupPending;
	private ImageView imgSearch;
	private IjoomerEditText editGroupSearch;
	private IjoomerButton btnGroupCreate;
	private SeekBar proSeekBar;

	private AQuery androidQuery;
	private ArrayList<SmartListItem> listData = new ArrayList<SmartListItem>();
	private ArrayList<HashMap<String, String>> allGroupList;
	private ArrayList<HashMap<String, String>> myGroupList;
	private ArrayList<HashMap<String, String>> pendingGroupList;
	private SmartListAdapterWithHolder adapterGroup;
	private SmartListAdapterWithHolder pendingAdapter;

	private JomGroupDataProvider providerAllGroup;
	private JomGroupDataProvider providerMyGroup;
	private JomGroupDataProvider providerPendingGroup;
	private JomGroupDataProvider providerSearchGroup;
	private JomGroupDataProvider provider;

	final private String ALLGROUP = "allGroup";
	final private String MYGROUP = "myGroup";
	final private String PENDINGGROUP = "pendingGroup";
	private String IN_USERID;
	private String currentList = MYGROUP;

	/**
	 * Overrides method
	 */

	@Override
	public int setLayoutId() {
		return R.layout.jom_group_list;
	}

	@Override
	public void initComponents() {

		listFooter = (LinearLayout) LayoutInflater.from(this).inflate(R.layout.ijoomer_list_footer, null);
		lstGroup = (ListView) findViewById(R.id.lstGroup);
		lstGroup.addFooterView(listFooter, null, false);
		lstGroup.setAdapter(null);
		txtGroupAll = (IjoomerTextView) findViewById(R.id.txtGroupAll);
		txtGroupMy = (IjoomerTextView) findViewById(R.id.txtGroupMy);
		txtGroupPending = (IjoomerTextView) findViewById(R.id.txtGroupPending);
		editGroupSearch = (IjoomerEditText) findViewById(R.id.editGroupSearch);
		imgSearch = (ImageView) findViewById(R.id.imgSearch);
		btnGroupCreate = (IjoomerButton) findViewById(R.id.btnGroupCreate);

		androidQuery = new AQuery(this);
		providerAllGroup = new JomGroupDataProvider(this);
		providerMyGroup = new JomGroupDataProvider(this);
		providerPendingGroup = new JomGroupDataProvider(this);
		provider = new JomGroupDataProvider(this);
		providerSearchGroup = new JomGroupDataProvider(this);

		getIntentData();
		getMyGroup(true);

	}

	@Override
	public void prepareViews() {
		if (!IjoomerGlobalConfiguration.isGroupCreate()) {
			btnGroupCreate.setVisibility(View.GONE);
		}
		txtGroupMy.setTextColor(getResources().getColor(R.color.blue));
	}

	@Override
	protected void onResume() {
		super.onResume();
		if (IjoomerApplicationConfiguration.isReloadRequired()) {
			IjoomerApplicationConfiguration.setReloadRequired(false);

			if (myGroupList != null) {
				myGroupList.clear();
			}
			if (allGroupList != null) {
				allGroupList.clear();
			}
			if (pendingGroupList != null) {
				pendingGroupList.clear();
			}
			if (currentList.equals(ALLGROUP)) {
				getAllGroup(false);
			} else if (currentList.equals(MYGROUP)) {
				getMyGroup(false);
			} else if (currentList.equals(PENDINGGROUP)) {
				getPendingGroup(false);
			}
		}
	}

	@Override
	public void setActionListeners() {

		lstGroup.setOnScrollListener(new OnScrollListener() {

			@Override
			public void onScrollStateChanged(AbsListView view, int scrollState) {

			}

			@Override
			public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
				if ((firstVisibleItem + visibleItemCount) >= totalItemCount && totalItemCount > 1) {

					if (editGroupSearch.getVisibility() == View.VISIBLE && editGroupSearch.getText().toString().trim().length() > 0) {
						if (!providerSearchGroup.isCalling() && providerSearchGroup.hasNextPage()) {
							listFooterVisible();
							providerSearchGroup.getAllGroupList(new WebCallListener() {

								@Override
								public void onProgressUpdate(int progressCount) {
								}

								@Override
								public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
									listFooterInvisible();
									if (responseCode == 200) {
										updateHeader(providerSearchGroup.getNotificationData());
										prepareList(data1, true);
									} else {
										responseErrorMessageHandler(responseCode, false);
									}

								}
							});
						}
					} else if (currentList.equals(ALLGROUP)) {
						if (!providerAllGroup.isCalling() && providerAllGroup.hasNextPage()) {
							listFooterVisible();
							providerAllGroup.getAllGroupList(new WebCallListener() {

								@Override
								public void onProgressUpdate(int progressCount) {
								}

								@Override
								public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
									listFooterInvisible();
									if (responseCode == 200) {
										updateHeader(providerAllGroup.getNotificationData());
										prepareList(data1, true);
									} else {
										responseErrorMessageHandler(responseCode, false);
									}

								}
							});
						}

					} else if (currentList.equals(MYGROUP)) {
						if (!providerMyGroup.isCalling() && providerMyGroup.hasNextPage()) {
							listFooterVisible();
							providerMyGroup.getMyGroupList(new WebCallListener() {

								@Override
								public void onProgressUpdate(int progressCount) {
								}

								@Override
								public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
									listFooterInvisible();
									if (responseCode == 200) {
										updateHeader(providerMyGroup.getNotificationData());
										prepareList(data1, true);
									} else {
										responseErrorMessageHandler(responseCode, false);
									}

								}
							});
						}
					} else if (currentList.equals(PENDINGGROUP)) {
						if (!providerPendingGroup.isCalling() && providerPendingGroup.hasNextPage()) {
							listFooterVisible();
							providerPendingGroup.getPendingGroupList(new WebCallListener() {

								@Override
								public void onProgressUpdate(int progressCount) {
								}

								@Override
								public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
									listFooterInvisible();
									if (responseCode == 200) {
										updateHeader(providerPendingGroup.getNotificationData());
										prepareList(data1, true);
									} else {
										responseErrorMessageHandler(responseCode, false);
									}
								}
							});
						}
					}
				}
			}
		});

		imgSearch.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				hideSoftKeyboard();
				if (editGroupSearch.getText().toString().trim().length() > 0) {
					getSeachGroupList(false, editGroupSearch.getText().toString().trim());
				} else {
					editGroupSearch.setError(getString(R.string.validation_value_required));
				}
			}
		});
		editGroupSearch.addTextChangedListener(new TextWatcher() {

			@Override
			public void onTextChanged(CharSequence c, int arg1, int arg2, int count) {

			}

			@Override
			public void beforeTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {
			}

			@Override
			public void afterTextChanged(Editable edit) {
				if (edit.length() == 0) {

					if (currentList.equals(ALLGROUP)) {
						txtGroupPending.setTextColor(getResources().getColor(R.color.txt_color));
						txtGroupAll.setTextColor(getResources().getColor(R.color.blue));
						txtGroupMy.setTextColor(getResources().getColor(R.color.txt_color));

						currentList = ALLGROUP;
						if (allGroupList != null && allGroupList.size() > 0) {
							prepareList(allGroupList, false);
							lstGroup.setAdapter(getListAdapter(listData));
						} else {
							getAllGroup(true);
						}
					} else if (currentList.equals(MYGROUP)) {
						txtGroupPending.setTextColor(getResources().getColor(R.color.txt_color));
						txtGroupAll.setTextColor(getResources().getColor(R.color.txt_color));
						txtGroupMy.setTextColor(getResources().getColor(R.color.blue));

						currentList = MYGROUP;
						if (myGroupList != null && myGroupList.size() > 0) {
							prepareList(myGroupList, false);
							lstGroup.setAdapter(getListAdapter(listData));
						} else {
							getMyGroup(true);
						}

					} else if (currentList.equals(PENDINGGROUP)) {
						txtGroupPending.setTextColor(getResources().getColor(R.color.blue));
						txtGroupAll.setTextColor(getResources().getColor(R.color.txt_color));
						txtGroupMy.setTextColor(getResources().getColor(R.color.txt_color));

						currentList = PENDINGGROUP;
						if (pendingGroupList != null && pendingGroupList.size() > 0) {
							prepareList(pendingGroupList, false);
							lstGroup.setAdapter(getListAdapter(listData));
						} else {
							getPendingGroup(true);
						}

					}
				}
			}
		});

		btnGroupCreate.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				provider.addOrEditGroupFieldList("0", new WebCallListener() {
					final SeekBar proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));

					@Override
					public void onProgressUpdate(int progressCount) {
						proSeekBar.setProgress(progressCount);
					}

					@Override
					public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
						if (responseCode == 200) {
							updateHeader(provider.getNotificationData());
							try {
								loadNew(JomGroupCreateActivity.class, JomGroupActivity.this, false, "IN_FIELD_LIST", data1, "IN_GROUP_ID", "0");
							} catch (Throwable e) {
								e.printStackTrace();
							}
						} else {
							responseErrorMessageHandler(responseCode, false);
						}
					}
				});
			}
		});

		txtGroupMy.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {

				if (!(providerAllGroup.isCalling() && providerPendingGroup.isCalling())) {
					if (!currentList.equals(MYGROUP)) {
						txtGroupPending.setTextColor(getResources().getColor(R.color.txt_color));
						txtGroupAll.setTextColor(getResources().getColor(R.color.txt_color));
						txtGroupMy.setTextColor(getResources().getColor(R.color.blue));

						currentList = MYGROUP;
						if (myGroupList != null && myGroupList.size() > 0) {
							prepareList(myGroupList, false);
							lstGroup.setAdapter(getListAdapter(listData));
						} else {
							getMyGroup(true);
						}

					}
				}
			}
		});

		txtGroupAll.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				if (!(providerPendingGroup.isCalling() && providerMyGroup.isCalling())) {
					if (!currentList.equals(ALLGROUP)) {
						txtGroupPending.setTextColor(getResources().getColor(R.color.txt_color));
						txtGroupAll.setTextColor(getResources().getColor(R.color.blue));
						txtGroupMy.setTextColor(getResources().getColor(R.color.txt_color));

						currentList = ALLGROUP;
						if (allGroupList != null && allGroupList.size() > 0) {
							prepareList(allGroupList, false);
							lstGroup.setAdapter(getListAdapter(listData));
						} else {
							getAllGroup(true);
						}
					}
				}
			}

		});

		txtGroupPending.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				if (!(providerAllGroup.isCalling() && providerMyGroup.isCalling())) {
					if (!currentList.equals(PENDINGGROUP)) {
						txtGroupPending.setTextColor(getResources().getColor(R.color.blue));
						txtGroupAll.setTextColor(getResources().getColor(R.color.txt_color));
						txtGroupMy.setTextColor(getResources().getColor(R.color.txt_color));

						currentList = PENDINGGROUP;
						if (pendingGroupList != null && pendingGroupList.size() > 0) {
							prepareList(pendingGroupList, false);
							lstGroup.setAdapter(getListAdapter(listData));
						} else {
							getPendingGroup(true);
						}

					}
				}
			}

		});

	}

	@Override
	public void onCheckedChanged(RadioGroup arg0, int arg1) {

	}

	/**
	 * Class method
	 */

	private void getIntentData() {
		IN_USERID = getIntent().getStringExtra("IN_USERID") == null ? "0" : getIntent().getStringExtra("IN_USERID");

	}

	private void responseErrorMessageHandler(final int responseCode, final boolean finishActivityOnConnectionProblem) {
		IjoomerUtilities.getCustomOkDialog(getString(R.string.group), getString(getResources().getIdentifier("code" + responseCode, "string", getPackageName())),
				getString(R.string.ok), R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

					@Override
					public void NeutralMathod() {
						if (responseCode == 599 && finishActivityOnConnectionProblem) {
							finish();
						}
					}
				});
	}

	private void getAllGroup(final boolean isProgressShow) {
		providerAllGroup.restorePagingSettings();
		if (isProgressShow) {
			proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
		}
		providerAllGroup.getAllGroupList(new WebCallListener() {

			@Override
			public void onProgressUpdate(int progressCount) {
				if (isProgressShow) {
					proSeekBar.setProgress(progressCount);
				}
			}

			@Override
			public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
				if (responseCode == 200) {
					updateHeader(providerAllGroup.getNotificationData());
					allGroupList = data1;
					prepareList(allGroupList, false);
					lstGroup.setAdapter(getListAdapter(listData));
				} else {
					responseErrorMessageHandler(responseCode, isProgressShow);
				}

			}
		});
	}

	private void getMyGroup(final boolean isProgressShow) {
		providerMyGroup.restorePagingSettings();
		if (isProgressShow) {
			proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
		}
		providerMyGroup.getMyGroupList(new WebCallListener() {

			@Override
			public void onProgressUpdate(int progressCount) {
				if (isProgressShow) {
					proSeekBar.setProgress(progressCount);
				}
			}

			@Override
			public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
				if (responseCode == 200) {
					updateHeader(providerMyGroup.getNotificationData());
					myGroupList = data1;
					prepareList(myGroupList, false);
					lstGroup.setAdapter(getListAdapter(listData));
				} else {

					if (responseCode == 204 && allGroupList == null) {
						currentList = ALLGROUP;
						txtGroupPending.setTextColor(getResources().getColor(R.color.txt_color));
						txtGroupAll.setTextColor(getResources().getColor(R.color.blue));
						txtGroupMy.setTextColor(getResources().getColor(R.color.txt_color));
						getAllGroup(true);
					} else {
						if (responseCode == 204) {
							listData.clear();
							if (adapterGroup != null) {
								adapterGroup.notifyDataSetChanged();
							}
						}
						responseErrorMessageHandler(responseCode, isProgressShow);
					}
				}
			}
		});
	}

	private void getPendingGroup(final boolean isProgressShow) {
		providerPendingGroup.restorePagingSettings();
		if (isProgressShow) {
			proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
		}
		providerPendingGroup.getPendingGroupList(new WebCallListener() {

			@Override
			public void onProgressUpdate(int progressCount) {
				if (isProgressShow) {
					proSeekBar.setProgress(progressCount);
				}
			}

			@Override
			public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
				if (responseCode == 200) {
					updateHeader(providerPendingGroup.getNotificationData());
					pendingGroupList = data1;
					prepareList(pendingGroupList, false);
					pendingAdapter = getListAdapter(listData);
					lstGroup.setAdapter(pendingAdapter);
				} else {
					if (responseCode == 204) {
						listData.clear();
						if (adapterGroup != null) {
							adapterGroup.notifyDataSetChanged();
						}
					}
					responseErrorMessageHandler(responseCode, false);
				}
			}
		});
	}

	private void getSeachGroupList(final boolean isProgressShow, final String searchText) {
		providerSearchGroup.restorePagingSettings();
		if (isProgressShow) {
			proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
		}
		providerSearchGroup.searchGroupList(null, searchText, null, new WebCallListener() {

			@Override
			public void onProgressUpdate(int progressCount) {
				if (isProgressShow) {
					proSeekBar.setProgress(progressCount);
				}
			}

			@Override
			public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
				if (responseCode == 200) {
					updateHeader(providerSearchGroup.getNotificationData());
					prepareList(data1, false);
					lstGroup.setAdapter(getListAdapter(listData));
				} else {
					if (responseCode == 204) {
						listData.clear();
						if (adapterGroup != null) {
							adapterGroup.notifyDataSetChanged();
						}
					}
					responseErrorMessageHandler(responseCode, false);
				}
			}
		});
	}

	public void listFooterVisible() {
		listFooter.setVisibility(View.VISIBLE);
	}

	public void listFooterInvisible() {
		listFooter.setVisibility(View.GONE);
	}

	public void prepareList(ArrayList<HashMap<String, String>> data, boolean append) {

		if (data != null) {
			if (append) {
				listData.clear();
			}
			for (HashMap<String, String> hashMap : data) {
				SmartListItem item = new SmartListItem();
				item.setItemLayout(R.layout.jom_group_list_item);
				ArrayList<Object> obj = new ArrayList<Object>();
				obj.add(hashMap);
				item.setValues(obj);
				if (append) {
					adapterGroup.add(item);
				} else {
					listData.add(item);
				}
			}
		}

	}

	/**
	 * List adapter
	 */
	private SmartListAdapterWithHolder getListAdapter(ArrayList<SmartListItem> data) {

		adapterGroup = new SmartListAdapterWithHolder(JomGroupActivity.this, R.layout.jom_group_list_item, data, new ItemView() {

			@SuppressWarnings("unchecked")
			@Override
			public View setItemView(final int position, View v, SmartListItem item, ViewHolder holder) {

				holder.lnrGroupItem = (LinearLayout) v.findViewById(R.id.lnrGroupItem);
				holder.imgGroupAvatar = (ImageView) v.findViewById(R.id.imgGroupAvatar);
				holder.txtGroupTitle = (IjoomerTextView) v.findViewById(R.id.txtGroupTitle);
				holder.txtGroupDescription = (IjoomerTextView) v.findViewById(R.id.txtGroupDescription);
				holder.txtGroupMember = (IjoomerTextView) v.findViewById(R.id.txtGroupMember);
				holder.txtGroupDiscussion = (IjoomerTextView) v.findViewById(R.id.txtGroupDiscussion);
				holder.txtGroupWallPost = (IjoomerTextView) v.findViewById(R.id.txtGroupWallPost);
				holder.lnrGroupPending = (LinearLayout) v.findViewById(R.id.lnrGroupPending);
				holder.txtGroupPendingAccept = (IjoomerTextView) v.findViewById(R.id.txtGroupPendingAccept);
				holder.txtGroupPendingReject = (IjoomerTextView) v.findViewById(R.id.txtGroupPendingReject);
				holder.lnrGroupPending.setVisibility(View.GONE);

				final HashMap<String, String> row = (HashMap<String, String>) item.getValues().get(0);

				if (currentList.equals(PENDINGGROUP)) {
					holder.lnrGroupPending.setVisibility(View.VISIBLE);
				}
				androidQuery.id(holder.imgGroupAvatar).image(row.get(AVATAR), true, true, getDeviceWidth(), 0);

				holder.txtGroupTitle.setText(row.get(TITLE));
				holder.txtGroupDescription.setText(row.get(DESCRIPTION));
				holder.txtGroupMember.setText(row.get(MEMBERS) + " " + getString(R.string.member));
				holder.txtGroupDiscussion.setText(row.get(DISCUSSIONS) + " " + getString(R.string.group_discussion));
				holder.txtGroupWallPost.setText(row.get(WALLS) + " " + getString(R.string.wall_post));

				holder.txtGroupPendingAccept.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View arg0) {
						proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
						provider.groupInvitation(row.get(ID), "1", new WebCallListener() {

							@Override
							public void onProgressUpdate(int progressCount) {
								proSeekBar.setProgress(progressCount);
							}

							@Override
							public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
								if (responseCode == 200) {
									updateHeader(provider.getNotificationData());
									providerAllGroup.restorePagingSettings();
									providerMyGroup.restorePagingSettings();
									providerSearchGroup.restorePagingSettings();
									myGroupList = null;
									allGroupList = null;
									pendingGroupList = null;
									pendingAdapter.remove(pendingAdapter.getItem(position));
								} else {
									responseErrorMessageHandler(responseCode, false);
								}

							}
						});
					}
				});
				holder.txtGroupPendingReject.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View arg0) {
						proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
						provider.groupInvitation(row.get(ID), "0", new WebCallListener() {

							@Override
							public void onProgressUpdate(int progressCount) {
								proSeekBar.setProgress(progressCount);
							}

							@Override
							public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
								if (responseCode == 200) {
									updateHeader(provider.getNotificationData());
									providerAllGroup.restorePagingSettings();
									providerMyGroup.restorePagingSettings();
									providerSearchGroup.restorePagingSettings();
									myGroupList = null;
									allGroupList = null;
									pendingGroupList = null;
									pendingAdapter.remove(pendingAdapter.getItem(position));
								} else {
									responseErrorMessageHandler(responseCode, false);
								}
							}
						});
					}
				});
				holder.lnrGroupItem.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View arg0) {
						try {
							loadNew(JomGroupDetailsActivity.class, JomGroupActivity.this, false, "IN_USERID", IN_USERID, "IN_GROUP_DETAILS", row);
						} catch (Throwable e) {
							e.printStackTrace();
						}
					}
				});

				return v;
			}

			@Override
			public View setItemView(int position, View v, SmartListItem item) {
				return null;
			}
		});
		return adapterGroup;
	}

}
