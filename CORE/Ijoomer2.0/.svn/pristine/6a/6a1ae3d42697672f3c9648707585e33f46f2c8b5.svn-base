package com.ijoomer.components.jomsocial;

import java.util.ArrayList;
import java.util.HashMap;

import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RadioGroup;
import android.widget.SeekBar;

import com.androidquery.AQuery;
import com.ijoomer.common.classes.IjoomerUtilities;
import com.ijoomer.common.classes.ViewHolder;
import com.ijoomer.common.configuration.IjoomerApplicationConfiguration;
import com.ijoomer.common.configuration.IjoomerGlobalConfiguration;
import com.ijoomer.customviews.IjoomerButton;
import com.ijoomer.customviews.IjoomerEditText;
import com.ijoomer.customviews.IjoomerTextView;
import com.ijoomer.library.jomsocial.JomEventDataProvider;
import com.ijoomer.src.R;
import com.ijoomer.weservice.WebCallListener;
import com.smart.framework.CustomAlertNeutral;
import com.smart.framework.ItemView;
import com.smart.framework.SmartListAdapterWithHolder;
import com.smart.framework.SmartListItem;

public class JomEventActivity extends JomMasterActivity {

	private LinearLayout listFooter;
	private LinearLayout lnrEventHeader;
	private ListView lstEvent;
	private IjoomerTextView txtEventAll;
	private IjoomerTextView txtEventMy;
	private IjoomerTextView txtEventPast;
	private IjoomerTextView txtEventPending;
	private ImageView imgSearch;
	private IjoomerEditText editEventSearch;
	private IjoomerButton btnEventCreate;
	private SeekBar proSeekBar;

	private AQuery androidQuery;
	private ArrayList<SmartListItem> listData = new ArrayList<SmartListItem>();
	private ArrayList<HashMap<String, String>> allEventList;
	private ArrayList<HashMap<String, String>> myEventList;
	private ArrayList<HashMap<String, String>> pastEventList;
	private ArrayList<HashMap<String, String>> pendingEventList;
	private SmartListAdapterWithHolder adapterEvent;

	private JomEventDataProvider providerAllEvent;
	private JomEventDataProvider providerMyEvent;
	private JomEventDataProvider providerPastEvent;
	private JomEventDataProvider providerPendingEvent;
	private JomEventDataProvider providerSearchEvent;
	private JomEventDataProvider provider;

	final private String ALLEVENT = "allevent";
	final private String MYEVENT = "myevent";
	final private String PASTEVENT = "pastevent";
	final private String PENDINGEVENT = "pendingevent";
	private String IN_USERID;
	private String IN_GROUP_ID;
	private String IN_GROUP_CREATE_EVENT;
	private String currentList = MYEVENT;

	/**
	 * Overrides method
	 */
	@Override
	public int setLayoutId() {
		return R.layout.jom_event_list;
	}

	@Override
	public void initComponents() {

		listFooter = (LinearLayout) LayoutInflater.from(this).inflate(R.layout.ijoomer_list_footer, null);
		lstEvent = (ListView) findViewById(R.id.lstEvent);
		lstEvent.addFooterView(listFooter, null, false);
		lstEvent.setAdapter(null);
		lnrEventHeader = (LinearLayout) findViewById(R.id.lnrEventHeader);
		txtEventAll = (IjoomerTextView) findViewById(R.id.txtEventAll);
		txtEventMy = (IjoomerTextView) findViewById(R.id.txtEventMy);
		txtEventPast = (IjoomerTextView) findViewById(R.id.txtEventPast);
		txtEventPending = (IjoomerTextView) findViewById(R.id.txtEventPending);
		imgSearch = (ImageView) findViewById(R.id.imgSearch);
		editEventSearch = (IjoomerEditText) findViewById(R.id.editEventSearch);
		btnEventCreate = (IjoomerButton) findViewById(R.id.btnEventCreate);

		androidQuery = new AQuery(this);
		providerAllEvent = new JomEventDataProvider(this);
		providerMyEvent = new JomEventDataProvider(this);
		providerPastEvent = new JomEventDataProvider(this);
		providerPendingEvent = new JomEventDataProvider(this);
		provider = new JomEventDataProvider(this);
		providerSearchEvent = new JomEventDataProvider(this);

		getIntentData();

	}

	@Override
	public void prepareViews() {
		if (!IN_GROUP_ID.equals("0")) {
			txtEventMy.setVisibility(View.GONE);
			txtEventPending.setVisibility(View.GONE);
			if (txtEventAll.getVisibility() == View.VISIBLE || txtEventMy.getVisibility() == View.VISIBLE || txtEventPast.getVisibility() == View.VISIBLE
					|| txtEventPending.getVisibility() == View.VISIBLE) {
				lnrEventHeader.setVisibility(View.VISIBLE);
			}
			editEventSearch.setVisibility(View.GONE);
			imgSearch.setVisibility(View.GONE);
			currentList = ALLEVENT;
			txtEventAll.setTextColor(getResources().getColor(R.color.blue));
			getGroupEvent(true);
		} else {
			lnrEventHeader.setVisibility(View.VISIBLE);
			txtEventMy.setTextColor(getResources().getColor(R.color.blue));
			getMyEvent(true);
		}
	}

	@Override
	protected void onResume() {
		super.onResume();
		if (IjoomerApplicationConfiguration.isReloadRequired()) {
			IjoomerApplicationConfiguration.setReloadRequired(false);

			if (myEventList != null) {
				myEventList.clear();
			}
			if (pastEventList != null) {
				pastEventList.clear();
			}

			if (pendingEventList != null) {
				pendingEventList.clear();
			}
			if (allEventList != null) {
				allEventList.clear();
			}

			if (currentList.equals(ALLEVENT)) {
				if (!IN_GROUP_ID.equals("0")) {
					getGroupEvent(false);
				} else {
					getAllEvent(false);
				}
			} else if (currentList.equals(MYEVENT)) {
				getMyEvent(false);
			} else if (currentList.equals(PASTEVENT)) {
				getPastEvent(false);
			} else if (currentList.equals(PENDINGEVENT)) {
				getPendingEvent(false);
			}
		}
	}

	@Override
	public void setActionListeners() {

		lstEvent.setOnScrollListener(new OnScrollListener() {

			@Override
			public void onScrollStateChanged(AbsListView view, int scrollState) {
			}

			@Override
			public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
				if ((firstVisibleItem + visibleItemCount) >= totalItemCount && totalItemCount > 1) {

					if (editEventSearch.getVisibility() == View.VISIBLE && editEventSearch.getText().toString().trim().length() > 0) {
						if (!providerSearchEvent.isCalling() && providerSearchEvent.hasNextPage()) {
							listFooterVisible();
							providerSearchEvent.searchEventList(null, editEventSearch.getText().toString().trim(), null, null, null, null, "latest", new WebCallListener() {
								@Override
								public void onProgressUpdate(int progressCount) {
								}

								@Override
								public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
									listFooterInvisible();
									if (responseCode == 200) {
										updateHeader(providerSearchEvent.getNotificationData());
										prepareList(data1, false);
									} else {
										responseErrorMessageHandler(responseCode, false);
									}
								}
							});
						}
					} else if (currentList.equals(ALLEVENT)) {
						if (!IN_GROUP_ID.equals("0")) {
							if (!providerMyEvent.isCalling() && providerMyEvent.hasNextPage()) {
								listFooterVisible();
								providerMyEvent.getGroupEventList(IN_GROUP_ID, new WebCallListener() {

									@Override
									public void onProgressUpdate(int progressCount) {
									}

									@Override
									public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
										listFooterInvisible();
										if (responseCode == 200) {
											updateHeader(providerMyEvent.getNotificationData());
											prepareList(data1, true);
										} else {
											responseErrorMessageHandler(responseCode, false);
										}
									}
								});
							}
						} else {
							if (providerAllEvent.isCalling() && providerAllEvent.hasNextPage()) {
								listFooterVisible();
								providerAllEvent.getAllEventList(new WebCallListener() {

									@Override
									public void onProgressUpdate(int progressCount) {
									}

									@Override
									public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
										listFooterInvisible();
										if (responseCode == 200) {
											updateHeader(providerAllEvent.getNotificationData());
											prepareList(data1, true);
										} else {
											responseErrorMessageHandler(responseCode, false);
										}
									}
								});
							}
						}
					} else if (currentList.equals(MYEVENT)) {
						if (providerMyEvent.isCalling() && providerMyEvent.hasNextPage()) {
							listFooterVisible();
							providerMyEvent.getMyEventList(new WebCallListener() {

								@Override
								public void onProgressUpdate(int progressCount) {
								}

								@Override
								public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
									listFooterInvisible();
									if (responseCode == 200) {
										updateHeader(providerMyEvent.getNotificationData());
										prepareList(data1, true);
									} else {
										responseErrorMessageHandler(responseCode, false);
									}
								}
							});
						}
					} else if (currentList.equals(PASTEVENT)) {
						if (providerPastEvent.isCalling() && providerPastEvent.hasNextPage()) {
							listFooterVisible();
							providerPastEvent.getMyEventList(new WebCallListener() {

								@Override
								public void onProgressUpdate(int progressCount) {
								}

								@Override
								public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
									listFooterInvisible();
									if (responseCode == 200) {
										updateHeader(providerPastEvent.getNotificationData());
										prepareList(data1, true);
									} else {
										responseErrorMessageHandler(responseCode, false);
									}
								}
							});
						}
					} else if (currentList.equals(PENDINGEVENT)) {
						if (providerPendingEvent.isCalling() && providerPendingEvent.hasNextPage()) {
							listFooterVisible();
							providerPendingEvent.getMyEventList(new WebCallListener() {

								@Override
								public void onProgressUpdate(int progressCount) {
								}

								@Override
								public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
									listFooterInvisible();
									if (responseCode == 200) {
										updateHeader(providerPendingEvent.getNotificationData());
										prepareList(data1, true);
									} else {
										responseErrorMessageHandler(responseCode, false);
									}
								}
							});
						}
					}
				}
			}
		});

		imgSearch.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				hideSoftKeyboard();
				if (editEventSearch.getText().toString().trim().length() > 0) {
					getSeachEventList(false, editEventSearch.getText().toString().trim());
				} else {
					editEventSearch.setError(getString(R.string.validation_value_required));
				}
			}
		});
		editEventSearch.addTextChangedListener(new TextWatcher() {

			@Override
			public void onTextChanged(CharSequence c, int arg1, int arg2, int count) {

			}

			@Override
			public void beforeTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {
			}

			@Override
			public void afterTextChanged(Editable edit) {
				if (edit.length() == 0) {
					hideSoftKeyboard();
					if (currentList.equals(ALLEVENT)) {
						txtEventPast.setTextColor(getResources().getColor(R.color.txt_color));
						txtEventPending.setTextColor(getResources().getColor(R.color.txt_color));
						txtEventAll.setTextColor(getResources().getColor(R.color.blue));
						txtEventMy.setTextColor(getResources().getColor(R.color.txt_color));

						currentList = ALLEVENT;
						if (allEventList != null && allEventList.size() > 0) {
							prepareList(allEventList, false);
							lstEvent.setAdapter(getListAdapter(listData));
						} else {
							getAllEvent(true);
						}
					} else if (currentList.equals(MYEVENT)) {
						txtEventPast.setTextColor(getResources().getColor(R.color.txt_color));
						txtEventPending.setTextColor(getResources().getColor(R.color.txt_color));
						txtEventAll.setTextColor(getResources().getColor(R.color.txt_color));
						txtEventMy.setTextColor(getResources().getColor(R.color.blue));

						currentList = MYEVENT;
						if (myEventList != null && myEventList.size() > 0) {
							prepareList(myEventList, false);
							lstEvent.setAdapter(getListAdapter(listData));
						} else {
							getMyEvent(true);
						}

					} else if (currentList.equals(PASTEVENT)) {
						txtEventPast.setTextColor(getResources().getColor(R.color.blue));
						txtEventPending.setTextColor(getResources().getColor(R.color.txt_color));
						txtEventAll.setTextColor(getResources().getColor(R.color.txt_color));
						txtEventMy.setTextColor(getResources().getColor(R.color.txt_color));

						currentList = PASTEVENT;
						if (pastEventList != null && pastEventList.size() > 0) {
							prepareList(pastEventList, false);
							lstEvent.setAdapter(getListAdapter(listData));
						} else {
							getPastEvent(true);
						}

					} else if (currentList.equals(PENDINGEVENT)) {
						txtEventPending.setTextColor(getResources().getColor(R.color.blue));
						txtEventPast.setTextColor(getResources().getColor(R.color.txt_color));
						txtEventAll.setTextColor(getResources().getColor(R.color.txt_color));
						txtEventMy.setTextColor(getResources().getColor(R.color.txt_color));

						currentList = PENDINGEVENT;
						if (pendingEventList != null && pendingEventList.size() > 0) {
							prepareList(pendingEventList, false);
							lstEvent.setAdapter(getListAdapter(listData));
						} else {
							getPendingEvent(true);
						}

					}

				}
			}
		});

		btnEventCreate.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				provider.addOrEditEventFieldList("0", IN_GROUP_ID, new WebCallListener() {
					final SeekBar proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));

					@Override
					public void onProgressUpdate(int progressCount) {
						proSeekBar.setProgress(progressCount);
					}

					@Override
					public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
						if (responseCode == 200) {
							updateHeader(provider.getNotificationData());
							try {
								loadNew(JomEventCreateActivity.class, JomEventActivity.this, false, "IN_FIELD_LIST", data1, "IN_EVENT_ID", "0", "IN_GROUP_ID", IN_GROUP_ID);
							} catch (Throwable e) {
								e.printStackTrace();
							}
						} else {
							responseErrorMessageHandler(responseCode, false);
						}
					}
				});
			}
		});

		txtEventMy.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {

				if (!(providerAllEvent.isCalling() && providerPendingEvent.isCalling() && providerPastEvent.isCalling())) {
					if (!currentList.equals(MYEVENT)) {
						txtEventPast.setTextColor(getResources().getColor(R.color.txt_color));
						txtEventPending.setTextColor(getResources().getColor(R.color.txt_color));
						txtEventAll.setTextColor(getResources().getColor(R.color.txt_color));
						txtEventMy.setTextColor(getResources().getColor(R.color.blue));

						currentList = MYEVENT;
						if (myEventList != null && myEventList.size() > 0) {
							prepareList(myEventList, false);
							lstEvent.setAdapter(getListAdapter(listData));
						} else {
							getMyEvent(true);
						}

					}
				}
			}
		});

		txtEventAll.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				if (!(providerPendingEvent.isCalling() && providerMyEvent.isCalling() && providerPastEvent.isCalling())) {
					if (!currentList.equals(ALLEVENT)) {
						txtEventPast.setTextColor(getResources().getColor(R.color.txt_color));
						txtEventPending.setTextColor(getResources().getColor(R.color.txt_color));
						txtEventAll.setTextColor(getResources().getColor(R.color.blue));
						txtEventMy.setTextColor(getResources().getColor(R.color.txt_color));

						currentList = ALLEVENT;
						if (allEventList != null && allEventList.size() > 0) {
							prepareList(allEventList, false);
							lstEvent.setAdapter(getListAdapter(listData));
						} else {
							if (!IN_GROUP_ID.equals("0")) {
								getGroupEvent(false);
							} else {
								getAllEvent(true);
							}
						}
					}
				}
			}

		});

		txtEventPast.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				if (!(providerAllEvent.isCalling() && providerMyEvent.isCalling() && providerPendingEvent.isCalling())) {
					if (!currentList.equals(PASTEVENT)) {
						txtEventPast.setTextColor(getResources().getColor(R.color.blue));
						txtEventPending.setTextColor(getResources().getColor(R.color.txt_color));
						txtEventAll.setTextColor(getResources().getColor(R.color.txt_color));
						txtEventMy.setTextColor(getResources().getColor(R.color.txt_color));

						currentList = PASTEVENT;
						if (pastEventList != null && pastEventList.size() > 0) {
							prepareList(pastEventList, false);
							lstEvent.setAdapter(getListAdapter(listData));
						} else {
							getPastEvent(true);
						}

					}
				}
			}

		});

		txtEventPending.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				if (!(providerAllEvent.isCalling() && providerMyEvent.isCalling() && providerPastEvent.isCalling())) {
					if (!currentList.equals(PENDINGEVENT)) {
						txtEventPending.setTextColor(getResources().getColor(R.color.blue));
						txtEventPast.setTextColor(getResources().getColor(R.color.txt_color));
						txtEventAll.setTextColor(getResources().getColor(R.color.txt_color));
						txtEventMy.setTextColor(getResources().getColor(R.color.txt_color));

						currentList = PENDINGEVENT;
						if (pendingEventList != null && pendingEventList.size() > 0) {
							prepareList(pendingEventList, false);
							lstEvent.setAdapter(getListAdapter(listData));
						} else {
							getPendingEvent(true);
						}

					}
				}
			}

		});

	}

	@Override
	public void onCheckedChanged(RadioGroup arg0, int arg1) {

	}

	/**
	 * Class method
	 */

	private void getIntentData() {
		IN_USERID = getIntent().getStringExtra("IN_USERID") == null ? "0" : getIntent().getStringExtra("IN_USERID");
		IN_GROUP_ID = getIntent().getStringExtra("IN_GROUP_ID") == null ? "0" : getIntent().getStringExtra("IN_GROUP_ID");
		IN_GROUP_CREATE_EVENT = getIntent().getStringExtra("IN_GROUP_CREATE_EVENT") == null ? "0" : getIntent().getStringExtra("IN_GROUP_CREATE_EVENT");
	}

	private void getAllEvent(final boolean isProgressShow) {
		providerAllEvent.restorePagingSettings();
		if (isProgressShow) {
			proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
		}
		providerAllEvent.getAllEventList(new WebCallListener() {

			@Override
			public void onProgressUpdate(int progressCount) {
				if (isProgressShow) {
					proSeekBar.setProgress(progressCount);
				}
			}

			@Override
			public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
				if (responseCode == 200) {
					updateHeader(providerAllEvent.getNotificationData());
					if (data1.get(0).containsKey(CREATEEVENT) && data1.get(0).get(CREATEEVENT).equals("0") && IN_GROUP_CREATE_EVENT.equals("0")) {
						btnEventCreate.setVisibility(View.GONE);
					} else {
						btnEventCreate.setVisibility(View.VISIBLE);
					}
					allEventList = data1;
					prepareList(allEventList, false);
					lstEvent.setAdapter(getListAdapter(listData));
				} else {
					lstEvent.setAdapter(null);
					responseErrorMessageHandler(responseCode, false);
				}
				if (!IjoomerGlobalConfiguration.isEventCreate()) {
					btnEventCreate.setVisibility(View.GONE);
				}

			}
		});
	}

	private void getMyEvent(final boolean isProgressShow) {
		providerMyEvent.restorePagingSettings();
		if (isProgressShow) {
			proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
		}
		providerMyEvent.getMyEventList(new WebCallListener() {

			@Override
			public void onProgressUpdate(int progressCount) {
				if (isProgressShow) {
					proSeekBar.setProgress(progressCount);
				}
			}

			@Override
			public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
				if (responseCode == 200) {
					updateHeader(providerMyEvent.getNotificationData());
					if (data1.get(0).containsKey(CREATEEVENT) && data1.get(0).get(CREATEEVENT).equals("0") && IN_GROUP_CREATE_EVENT.equals("0")) {
						btnEventCreate.setVisibility(View.GONE);
					} else {
						btnEventCreate.setVisibility(View.VISIBLE);
					}
					myEventList = data1;
					prepareList(data1, false);
					lstEvent.setAdapter(getListAdapter(listData));
				} else {
					if (responseCode == 204 && allEventList == null) {
						txtEventPast.setTextColor(getResources().getColor(R.color.txt_color));
						txtEventPending.setTextColor(getResources().getColor(R.color.txt_color));
						txtEventAll.setTextColor(getResources().getColor(R.color.blue));
						txtEventMy.setTextColor(getResources().getColor(R.color.txt_color));
						currentList = ALLEVENT;
						getAllEvent(true);
					} else {
						if (responseCode == 204) {
							listData.clear();
							if (adapterEvent != null) {
								adapterEvent.notifyDataSetChanged();
							}
						}
						responseErrorMessageHandler(responseCode, isProgressShow);
					}
				}
				if (!IjoomerGlobalConfiguration.isEventCreate()) {
					btnEventCreate.setVisibility(View.GONE);
				}

			}
		});
	}

	private void getGroupEvent(final boolean isProgressShow) {
		providerMyEvent.restorePagingSettings();
		if (isProgressShow) {
			proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
		}
		providerMyEvent.getGroupEventList(IN_GROUP_ID, new WebCallListener() {

			@Override
			public void onProgressUpdate(int progressCount) {
				if (isProgressShow) {
					proSeekBar.setProgress(progressCount);
				}
			}

			@Override
			public void onCallComplete(final int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
				if (responseCode == 200) {

					updateHeader(providerMyEvent.getNotificationData());
					if (data1.get(0).containsKey(CREATEEVENT) && data1.get(0).get(CREATEEVENT).equals("0") && IN_GROUP_CREATE_EVENT.equals("0")) {
						btnEventCreate.setVisibility(View.GONE);
					} else {
						btnEventCreate.setVisibility(View.VISIBLE);
					}
					if (IjoomerGlobalConfiguration.isEventCreate()) {
						btnEventCreate.setVisibility(View.GONE);
					}
					allEventList = data1;
					prepareList(allEventList, false);
					lstEvent.setAdapter(getListAdapter(listData));
				} else {
					lstEvent.setAdapter(null);
					IjoomerUtilities.getCustomOkDialog(getString(R.string.event), getString(getResources().getIdentifier("code" + responseCode, "string", getPackageName())),
							getString(R.string.ok), R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

								@Override
								public void NeutralMathod() {
									if (responseCode == 204) {
										if (IjoomerGlobalConfiguration.isEventCreate()) {
											if (!IN_GROUP_ID.equals("0") && IN_GROUP_CREATE_EVENT.equals("1")) {
												provider.addOrEditEventFieldList("0", IN_GROUP_ID, new WebCallListener() {
													final SeekBar proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));

													@Override
													public void onProgressUpdate(int progressCount) {
														proSeekBar.setProgress(progressCount);
													}

													@Override
													public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
														if (responseCode == 200) {
															updateHeader(provider.getNotificationData());
															try {
																loadNew(JomEventCreateActivity.class, JomEventActivity.this, false, "IN_FIELD_LIST", data1, "IN_EVENT_ID", "0",
																		"IN_GROUP_ID", IN_GROUP_ID);
															} catch (Throwable e) {
																e.printStackTrace();
															}
														} else {
															responseErrorMessageHandler(responseCode, true);
														}
													}
												});
											}
										} else if (!IN_GROUP_ID.equals("0")) {
											finish();
										}

									}

								}
							});
				}
				if (!IjoomerGlobalConfiguration.isEventCreate()) {
					btnEventCreate.setVisibility(View.GONE);
				}
			}
		});
	}

	private void getPendingEvent(final boolean isProgressShow) {
		providerPendingEvent.restorePagingSettings();
		if (isProgressShow) {
			proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
		}
		providerPendingEvent.getPendingEventList(new WebCallListener() {

			@Override
			public void onProgressUpdate(int progressCount) {
				if (isProgressShow) {
					proSeekBar.setProgress(progressCount);
				}
			}

			@Override
			public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
				if (responseCode == 200) {
					updateHeader(providerPendingEvent.getNotificationData());
					if (data1.get(0).containsKey(CREATEEVENT) && data1.get(0).get(CREATEEVENT).equals("0") && IN_GROUP_CREATE_EVENT.equals("0")) {
						btnEventCreate.setVisibility(View.GONE);
					} else {
						btnEventCreate.setVisibility(View.VISIBLE);
					}
					prepareList(data1, false);
					lstEvent.setAdapter(getListAdapter(listData));
				} else {
					lstEvent.setAdapter(null);
					responseErrorMessageHandler(responseCode, false);
				}
				if (!IjoomerGlobalConfiguration.isEventCreate()) {
					btnEventCreate.setVisibility(View.GONE);
				}
			}
		});
	}

	private void getPastEvent(final boolean isProgressShow) {
		providerPastEvent.restorePagingSettings();
		if (isProgressShow) {
			proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
		}
		providerPastEvent.getPastEventList(IN_GROUP_ID, new WebCallListener() {

			@Override
			public void onProgressUpdate(int progressCount) {
				if (isProgressShow) {
					proSeekBar.setProgress(progressCount);
				}
			}

			@Override
			public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
				if (responseCode == 200) {
					updateHeader(providerPastEvent.getNotificationData());
					if (data1.get(0).containsKey(CREATEEVENT) && data1.get(0).get(CREATEEVENT).equals("0") && IN_GROUP_CREATE_EVENT.equals("0")) {
						btnEventCreate.setVisibility(View.GONE);
					} else {
						btnEventCreate.setVisibility(View.VISIBLE);
					}
					prepareList(data1, false);
					lstEvent.setAdapter(getListAdapter(listData));

				} else {
					lstEvent.setAdapter(null);
					responseErrorMessageHandler(responseCode, false);
				}
				if (!IjoomerGlobalConfiguration.isEventCreate()) {
					btnEventCreate.setVisibility(View.GONE);
				}
			}
		});
	}

	private void getSeachEventList(final boolean isProgressShow, final String searchText) {
		providerSearchEvent.restorePagingSettings();
		if (isProgressShow) {
			proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
		}
		providerSearchEvent.searchEventList(null, searchText, null, null, null, null, "latest", new WebCallListener() {

			@Override
			public void onProgressUpdate(int progressCount) {
				if (isProgressShow) {
					proSeekBar.setProgress(progressCount);
				}
			}

			@Override
			public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
				if (responseCode == 200) {
					updateHeader(providerSearchEvent.getNotificationData());
					if (data1.get(0).containsKey(CREATEEVENT) && data1.get(0).get(CREATEEVENT).equals("0")) {
						btnEventCreate.setVisibility(View.GONE);
					} else {
						btnEventCreate.setVisibility(View.VISIBLE);
					}
					prepareList(data1, false);
					lstEvent.setAdapter(getListAdapter(listData));
				} else {
					lstEvent.setAdapter(null);
					responseErrorMessageHandler(responseCode, false);
				}
				if (!IjoomerGlobalConfiguration.isEventCreate()) {
					btnEventCreate.setVisibility(View.GONE);
				}
			}
		});
	}

	public void listFooterVisible() {
		listFooter.setVisibility(View.VISIBLE);
	}

	public void listFooterInvisible() {
		listFooter.setVisibility(View.GONE);
	}

	private void responseErrorMessageHandler(final int responseCode, final boolean finishActivityOnConnectionProblem) {
		IjoomerUtilities.getCustomOkDialog(getString(R.string.event), getString(getResources().getIdentifier("code" + responseCode, "string", getPackageName())),
				getString(R.string.ok), R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

					@Override
					public void NeutralMathod() {
						if (responseCode == 599 && finishActivityOnConnectionProblem) {
							finish();
						}
					}
				});
	}

	public void prepareList(ArrayList<HashMap<String, String>> data, boolean append) {
		if (data != null) {
			if (!append) {
				listData.clear();
			}
			for (HashMap<String, String> hashMap : data) {
				SmartListItem item = new SmartListItem();
				item.setItemLayout(R.layout.jom_event_list_item);
				ArrayList<Object> obj = new ArrayList<Object>();
				obj.add(hashMap);
				item.setValues(obj);
				if (append) {
					adapterEvent.add(item);
				} else {
					listData.add(item);
				}
			}

		}

	}

	/**
	 * List adapter
	 */

	private SmartListAdapterWithHolder getListAdapter(ArrayList<SmartListItem> data) {

		adapterEvent = new SmartListAdapterWithHolder(JomEventActivity.this, R.layout.jom_event_list_item, data, new ItemView() {

			@SuppressWarnings("unchecked")
			@Override
			public View setItemView(final int position, View v, SmartListItem item, ViewHolder holder) {

				holder.lnrEventList = (LinearLayout) v.findViewById(R.id.lnrEventList);
				holder.imgEventAvatar = (ImageView) v.findViewById(R.id.imgEventAvatar);
				holder.txtEventDate = (IjoomerTextView) v.findViewById(R.id.txtEventDate);
				holder.txtEventTitle = (IjoomerTextView) v.findViewById(R.id.txtEventTitle);
				holder.txtEventStatus = (IjoomerTextView) v.findViewById(R.id.txtEventStatus);
				holder.txEventLocation = (IjoomerTextView) v.findViewById(R.id.txEventLocation);
				holder.txtEventStartEndDate = (IjoomerTextView) v.findViewById(R.id.txtEventStartEndDate);
				holder.txtEventGuestAttendingCount = (IjoomerTextView) v.findViewById(R.id.txtEventGuestAttendingCount);
				holder.lnrEventPending = (LinearLayout) v.findViewById(R.id.lnrEventPending);
				holder.txtEventPendingAccept = (IjoomerTextView) v.findViewById(R.id.txtEventPendingAccept);
				holder.txtEventPendingReject = (IjoomerTextView) v.findViewById(R.id.txtEventPendingReject);
				holder.lnrEventPending.setVisibility(View.GONE);
				holder.txtEventStatus.setVisibility(View.GONE);

				final HashMap<String, String> row = (HashMap<String, String>) item.getValues().get(0);

				if (currentList.equals(PENDINGEVENT)) {
					holder.lnrEventPending.setVisibility(View.VISIBLE);
				}
				androidQuery.id(holder.imgEventAvatar).image(row.get(AVATAR), true, true, getDeviceWidth(), 0);

				holder.txtEventTitle.setText(row.get(TITLE));
				holder.txtEventDate.setText(row.get(DATE));
				holder.txEventLocation.setText(row.get(LOCATION));
				holder.txtEventStartEndDate.setText(row.get(STARTDATE) + " - " + row.get(ENDDATE));
				holder.txtEventGuestAttendingCount.setText(String.format(getString(R.string.event_guest_attending_count), row.get(CONFIRMED)));
				if (row.get(ONGOING).equals("1")) {
					holder.txtEventStatus.setVisibility(View.VISIBLE);
				}

				holder.txtEventPendingAccept.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View arg0) {
						proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
						provider.eventResponse(row.get(ID), "1", new WebCallListener() {

							@Override
							public void onProgressUpdate(int progressCount) {
								proSeekBar.setProgress(progressCount);
							}

							@Override
							public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
								if (responseCode == 200) {
									updateHeader(provider.getNotificationData());
									listData.remove(position);
									if (listData.size() <= 0) {
										if (myEventList != null && myEventList.size() > 0) {
											txtEventPast.setTextColor(getResources().getColor(R.color.txt_color));
											txtEventPending.setTextColor(getResources().getColor(R.color.txt_color));
											txtEventAll.setTextColor(getResources().getColor(R.color.txt_color));
											txtEventMy.setTextColor(getResources().getColor(R.color.blue));
											currentList = MYEVENT;
											getMyEvent(false);

										} else if (allEventList != null && allEventList.size() > 0) {
											txtEventPast.setTextColor(getResources().getColor(R.color.txt_color));
											txtEventPending.setTextColor(getResources().getColor(R.color.txt_color));
											txtEventAll.setTextColor(getResources().getColor(R.color.blue));
											txtEventMy.setTextColor(getResources().getColor(R.color.txt_color));
											currentList = ALLEVENT;
											getAllEvent(false);

										} else if (pastEventList != null && pastEventList.size() > 0) {
											txtEventPast.setTextColor(getResources().getColor(R.color.blue));
											txtEventPending.setTextColor(getResources().getColor(R.color.txt_color));
											txtEventAll.setTextColor(getResources().getColor(R.color.txt_color));
											txtEventMy.setTextColor(getResources().getColor(R.color.txt_color));
											currentList = PASTEVENT;
											getPastEvent(false);
										}
									} else {
										responseErrorMessageHandler(responseCode, false);
									}
									adapterEvent.notifyDataSetChanged();
								}

							}
						});
					}
				});
				holder.txtEventPendingReject.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View arg0) {
						proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
						provider.eventResponse(row.get(ID), "2", new WebCallListener() {

							@Override
							public void onProgressUpdate(int progressCount) {
								proSeekBar.setProgress(progressCount);
							}

							@Override
							public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
								if (responseCode != 200) {
									updateHeader(provider.getNotificationData());
									listData.remove(position);
									if (listData.size() <= 0) {
										if (myEventList != null && myEventList.size() > 0) {
											txtEventPast.setTextColor(getResources().getColor(R.color.txt_color));
											txtEventPending.setTextColor(getResources().getColor(R.color.txt_color));
											txtEventAll.setTextColor(getResources().getColor(R.color.txt_color));
											txtEventMy.setTextColor(getResources().getColor(R.color.blue));
											currentList = MYEVENT;
											getMyEvent(false);

										} else if (allEventList != null && allEventList.size() > 0) {
											txtEventPast.setTextColor(getResources().getColor(R.color.txt_color));
											txtEventPending.setTextColor(getResources().getColor(R.color.txt_color));
											txtEventAll.setTextColor(getResources().getColor(R.color.blue));
											txtEventMy.setTextColor(getResources().getColor(R.color.txt_color));
											currentList = ALLEVENT;
											getAllEvent(false);

										} else if (pastEventList != null && pastEventList.size() > 0) {
											txtEventPast.setTextColor(getResources().getColor(R.color.blue));
											txtEventPending.setTextColor(getResources().getColor(R.color.txt_color));
											txtEventAll.setTextColor(getResources().getColor(R.color.txt_color));
											txtEventMy.setTextColor(getResources().getColor(R.color.txt_color));
											currentList = PASTEVENT;
											getPastEvent(false);
										}
									} else {
										responseErrorMessageHandler(responseCode, false);
									}
									adapterEvent.notifyDataSetChanged();
								}
							}
						});
					}
				});
				holder.lnrEventList.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View arg0) {
						try {
							loadNew(JomEventDetailsActivity.class, JomEventActivity.this, false, "IN_USERID", IN_USERID, "IN_EVENT_DETAILS", row);
						} catch (Throwable e) {
							e.printStackTrace();
						}
					}
				});

				return v;
			}

			@Override
			public View setItemView(int position, View v, SmartListItem item) {
				return null;
			}
		});
		return adapterEvent;
	}

}
