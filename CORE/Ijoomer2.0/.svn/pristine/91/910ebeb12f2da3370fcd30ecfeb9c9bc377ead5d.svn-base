package com.ijoomer.components.jomsocial;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Color;
import android.location.Address;
import android.provider.MediaStore;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentStatePagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.text.Html;
import android.text.method.LinkMovementMethod;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RadioGroup;
import android.widget.SeekBar;
import android.widget.Spinner;
import android.widget.TextView.BufferType;

import com.androidquery.AQuery;
import com.ijoomer.common.classes.IJoomerTwitterShareActivity;
import com.ijoomer.common.classes.IjoomerPhotoGalaryActivity;
import com.ijoomer.common.classes.IjoomerUtilities;
import com.ijoomer.common.classes.ViewHolder;
import com.ijoomer.common.configuration.IjoomerApplicationConfiguration;
import com.ijoomer.custom.interfaces.SelectImageDialogListner;
import com.ijoomer.custom.interfaces.ShareListner;
import com.ijoomer.customviews.IjoomerButton;
import com.ijoomer.customviews.IjoomerEditText;
import com.ijoomer.customviews.IjoomerTextView;
import com.ijoomer.library.jomsocial.JomGalleryDataProvider;
import com.ijoomer.map.IjoomerMapAddress;
import com.ijoomer.page.indicator.CirclePageIndicator;
import com.ijoomer.src.R;
import com.ijoomer.weservice.WebCallListener;
import com.smart.framework.CustomAlertMagnatic;
import com.smart.framework.CustomAlertNeutral;
import com.smart.framework.ItemView;
import com.smart.framework.SmartListAdapterWithHolder;
import com.smart.framework.SmartListItem;

public class JomAlbumsDetailsActivity extends JomMasterActivity {

	private LinearLayout listFooter;
	private LinearLayout lnrPhotoList;
	private ListView lstAlbumComment;
	private LinearLayout lnrAlbumWriteComment;
	private LinearLayout lnrAlbumDetail;
	private LinearLayout lnrCreateAlbum;
	private LinearLayout lnrHeader;
	private IjoomerTextView txtAlbumUploadPhoto;
	private IjoomerTextView txtAlbumTitle;
	private IjoomerTextView txAlbumBy;
	private IjoomerTextView txtAlbumDateLocation;
	private IjoomerTextView txtAlbumDescription;
	private IjoomerTextView txtAlbumLikeCount;
	private IjoomerTextView txtAlbumDislikeCount;
	private IjoomerTextView txtAlbumCommentCount;
	private IjoomerTextView txtAlbumShare;
	private IjoomerTextView txtAlbumPrivacy;
	private IjoomerTextView txtAlbumEdit;
	private IjoomerTextView txtAlbumRemove;
	private IjoomerEditText edtAlbumName;
	private IjoomerEditText edtAlbumWriteComment;
	private IjoomerEditText edtAlbumLocation;
	private IjoomerEditText edtAlbumDescription;
	private IjoomerButton btnSend;
	private IjoomerButton btnSave;
	private IjoomerButton btnCancle;
	private IjoomerButton btnUploadPhoto;
	private Spinner spnWhoCanSee;
	private ImageView imgAlbumAvatar;
	private ImageView imgMap;
	private ViewPager viewPager;
	private CirclePageIndicator indicator;
	private ViewGroup albumDeatilHeaderLayout;

	private AQuery androidQuery;
	private HashMap<String, String> IN_ALBUM;
	private PageAdapter adapter;
	private SmartListAdapterWithHolder commentAdapter;
	private ArrayList<SmartListItem> listData = new ArrayList<SmartListItem>();
	private ArrayList<JomPhotoFragment> photoFragmetStack = new ArrayList<JomPhotoFragment>();

	private JomGalleryDataProvider commentProvider;
	private JomGalleryDataProvider provider;

	final private int PICK_IMAGE = 0;
	final private int PICK_IMAGE_MULTIPLE = 1;
	final private int GET_ADDRESS_FROM_MAP = 4;
	final private int TAKE_IMAGE = 2;
	final private int UPLOAD_PHOTO = 3;
	public static boolean isResume = false;
	private String PHOTO_COUNT;
	private String IN_USERID;
	private String IN_GROUP_ID;
	private String IN_PROFILE_COVER;
	private String IN_GROUP_UPLOAD_PHOTO;
	private int pageLimit = 12;

	/**
	 * Overrides method
	 */
	@Override
	public int setLayoutId() {
		return R.layout.jom_album_details;
	}

	@Override
	public void initComponents() {

		albumDeatilHeaderLayout = (ViewGroup) LayoutInflater.from(this).inflate(R.layout.jom_album_details_header, null);
		listFooter = (LinearLayout) LayoutInflater.from(this).inflate(R.layout.ijoomer_list_footer, null);

		lstAlbumComment = (ListView) findViewById(R.id.lstAlbumComment);
		lnrHeader = (LinearLayout) findViewById(R.id.lnrHeader);
		txtAlbumEdit = (IjoomerTextView) findViewById(R.id.txtAlbumEdit);
		txtAlbumRemove = (IjoomerTextView) findViewById(R.id.txtAlbumRemove);
		txtAlbumUploadPhoto = (IjoomerTextView) findViewById(R.id.txtAlbumUploadPhoto);
		lstAlbumComment.addHeaderView(albumDeatilHeaderLayout, null, false);
		lstAlbumComment.addFooterView(listFooter, null, false);
		lstAlbumComment.setAdapter(null);

		lnrAlbumWriteComment = (LinearLayout) albumDeatilHeaderLayout.findViewById(R.id.lnrAlbumWriteComment);
		lnrCreateAlbum = (LinearLayout) albumDeatilHeaderLayout.findViewById(R.id.lnrCreateAlbum);
		lnrAlbumDetail = (LinearLayout) albumDeatilHeaderLayout.findViewById(R.id.lnrAlbumDetail);
		lnrPhotoList = (LinearLayout) albumDeatilHeaderLayout.findViewById(R.id.lnrPhotoList);
		txtAlbumTitle = (IjoomerTextView) albumDeatilHeaderLayout.findViewById(R.id.txtAlbumTitle);
		txAlbumBy = (IjoomerTextView) albumDeatilHeaderLayout.findViewById(R.id.txAlbumBy);
		txtAlbumDateLocation = (IjoomerTextView) albumDeatilHeaderLayout.findViewById(R.id.txtAlbumDateLocation);
		txtAlbumDescription = (IjoomerTextView) albumDeatilHeaderLayout.findViewById(R.id.txtAlbumDescription);
		txtAlbumLikeCount = (IjoomerTextView) albumDeatilHeaderLayout.findViewById(R.id.txtAlbumLikeCount);
		txtAlbumDislikeCount = (IjoomerTextView) albumDeatilHeaderLayout.findViewById(R.id.txtAlbumDislikeCount);
		txtAlbumCommentCount = (IjoomerTextView) albumDeatilHeaderLayout.findViewById(R.id.txtAlbumCommentCount);
		txtAlbumShare = (IjoomerTextView) albumDeatilHeaderLayout.findViewById(R.id.txtAlbumShare);
		txtAlbumPrivacy = (IjoomerTextView) albumDeatilHeaderLayout.findViewById(R.id.txtAlbumPrivacy);
		imgAlbumAvatar = (ImageView) albumDeatilHeaderLayout.findViewById(R.id.imgAlbumAvatar);
		imgMap = (ImageView) albumDeatilHeaderLayout.findViewById(R.id.imgMap);
		indicator = (CirclePageIndicator) albumDeatilHeaderLayout.findViewById(R.id.indicator);
		edtAlbumWriteComment = (IjoomerEditText) albumDeatilHeaderLayout.findViewById(R.id.edtAlbumWriteComment);
		edtAlbumName = (IjoomerEditText) albumDeatilHeaderLayout.findViewById(R.id.edtAlbumName);
		edtAlbumLocation = (IjoomerEditText) albumDeatilHeaderLayout.findViewById(R.id.edtAlbumLocation);
		edtAlbumDescription = (IjoomerEditText) albumDeatilHeaderLayout.findViewById(R.id.edtAlbumDescription);
		spnWhoCanSee = (Spinner) albumDeatilHeaderLayout.findViewById(R.id.spnWhoCanSee);
		btnSend = (IjoomerButton) albumDeatilHeaderLayout.findViewById(R.id.btnSend);
		btnSave = (IjoomerButton) albumDeatilHeaderLayout.findViewById(R.id.btnSave);
		btnCancle = (IjoomerButton) albumDeatilHeaderLayout.findViewById(R.id.btnCancle);
		btnUploadPhoto = (IjoomerButton) albumDeatilHeaderLayout.findViewById(R.id.btnUploadPhoto);
		viewPager = (ViewPager) albumDeatilHeaderLayout.findViewById(R.id.viewPager);

		androidQuery = new AQuery(this);
		commentProvider = new JomGalleryDataProvider(this);
		provider = new JomGalleryDataProvider(this);

		getIntentData();
	}

	@Override
	public void prepareViews() {
		if (!IN_PROFILE_COVER.equals("0")) {
			ting(getString(R.string.tap_photo_to_set_profile_cover));
			lnrHeader.setVisibility(View.GONE);
			lnrAlbumDetail.setVisibility(View.GONE);
			lnrAlbumWriteComment.setVisibility(View.GONE);
			btnUploadPhoto.setVisibility(View.VISIBLE);
		}
		spnWhoCanSee.setAdapter(new IjoomerUtilities.MyCustomAdapter(this, new ArrayList<String>(Arrays.asList(getResources().getStringArray(R.array.wall_post_type)))));
		spnWhoCanSee.setSelection(getPrivacyIndex(IN_ALBUM.get(PERMISSION)));
		if (IN_ALBUM.get(COUNT).equals("0")) {
			lnrPhotoList.setVisibility(View.GONE);
		} else {
			System.out.println("stack : " + getSupportFragmentManager().getBackStackEntryCount());
			adapter = new PageAdapter(getSupportFragmentManager());
			viewPager.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT, calculateheight()));
			viewPager.setAdapter(adapter);
			viewPager.setCurrentItem(0);
			indicator.setPageColor(Color.TRANSPARENT);
			indicator.setStrokeColor(Color.parseColor(getString(R.color.blue)));
			indicator.setStrokeWidth(convertSizeToDeviceDependent(1));
			indicator.setRadius(convertSizeToDeviceDependent(3));

			indicator.setFillColor(Color.parseColor(getString(R.color.blue)));
			indicator.setViewPager(viewPager, 0);
			indicator.setSnap(true);
			indicator.setOnPageChangeListener(new OnPageChangeListener() {

				@Override
				public void onPageSelected(int arg0) {
					System.out.println("PAGE state " + arg0);
					((JomPhotoFragment) adapter.getItem(arg0)).initComponents();
				}

				@Override
				public void onPageScrolled(int arg0, float arg1, int arg2) {

				}

				@Override
				public void onPageScrollStateChanged(int arg0) {

				}
			});
		}

	}

	@Override
	protected void onResume() {
		super.onResume();
		if (IjoomerApplicationConfiguration.isReloadRequired()) {
			IjoomerApplicationConfiguration.setReloadRequired(false);
			PHOTO_COUNT = "" + JomPhotoDetailsActivity.IN_TOTAL_COUNT;
			if (!IN_ALBUM.get(COUNT).toString().equals(PHOTO_COUNT)) {
				if (lnrPhotoList.getVisibility() == View.GONE) {
					lnrPhotoList.setVisibility(View.VISIBLE);
				}
				photoFragmetStack.clear();
				IN_ALBUM.put(COUNT, PHOTO_COUNT);
				IjoomerApplicationConfiguration.setReloadRequired(true);
				prepareViews();
			} else {
				photoFragmetStack.clear();
				prepareViews();
			}
		}

	}

	@Override
	public void setActionListeners() {

		btnUploadPhoto.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {

				IjoomerUtilities.selectImageDialog(new SelectImageDialogListner() {

					@Override
					public void onPhoneGallery() {
						if (IjoomerApplicationConfiguration.isUploadMultiplePhotos()) {
							Intent intent = new Intent(JomAlbumsDetailsActivity.this, IjoomerPhotoGalaryActivity.class);
							startActivityForResult(intent, PICK_IMAGE_MULTIPLE);
						} else {
							Intent intent = new Intent();
							intent.setType("image/*");
							intent.setAction(Intent.ACTION_GET_CONTENT);
							startActivityForResult(Intent.createChooser(intent, ""), PICK_IMAGE);
						}
					}

					@Override
					public void onCapture() {
						final Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
						intent.putExtra(MediaStore.EXTRA_OUTPUT, setImageUri());
						startActivityForResult(intent, TAKE_IMAGE);
					}
				});

			}
		});

		imgMap.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				Intent intent = new Intent(JomAlbumsDetailsActivity.this, IjoomerMapAddress.class);
				startActivityForResult(intent, GET_ADDRESS_FROM_MAP);
			}
		});

		btnSend.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				hideSoftKeyboard();
				if (edtAlbumWriteComment.getText().toString().trim().length() > 0) {
					provider.addAlbumComment(IN_ALBUM.get(ID), edtAlbumWriteComment.getText().toString().trim(), new WebCallListener() {
						final SeekBar proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));

						@Override
						public void onProgressUpdate(int progressCount) {
							proSeekBar.setProgress(progressCount);
						}

						@Override
						public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
							if (responseCode == 200) {
								updateHeader(provider.getNotificationData());
								IjoomerApplicationConfiguration.setReloadRequired(true);
								edtAlbumWriteComment.setText(null);
								IN_ALBUM.put(COMMENTCOUNT, String.valueOf(Integer.parseInt(IN_ALBUM.get(COMMENTCOUNT)) + 1));
								txtAlbumCommentCount.setText(IN_ALBUM.get(COMMENTCOUNT));
								getComment();
							} else {
								IjoomerUtilities.getCustomOkDialog(getString(R.string.photo),
										getString(getResources().getIdentifier("code" + responseCode, "string", getPackageName())), getString(R.string.ok),
										R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

											@Override
											public void NeutralMathod() {
												lnrAlbumDetail.setVisibility(View.VISIBLE);
												lnrCreateAlbum.setVisibility(View.GONE);
											}
										});
							}
						}
					});
				} else {
					edtAlbumWriteComment.setError(getString(R.string.validation_value_required));
				}
			}
		});

		txtAlbumUploadPhoto.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				IjoomerUtilities.selectImageDialog(new SelectImageDialogListner() {

					@Override
					public void onPhoneGallery() {
						if (IjoomerApplicationConfiguration.isUploadMultiplePhotos()) {
							Intent intent = new Intent(JomAlbumsDetailsActivity.this, IjoomerPhotoGalaryActivity.class);
							startActivityForResult(intent, PICK_IMAGE_MULTIPLE);
						} else {
							Intent intent = new Intent();
							intent.setType("image/*");
							intent.setAction(Intent.ACTION_GET_CONTENT);
							startActivityForResult(Intent.createChooser(intent, ""), PICK_IMAGE);
						}
					}

					@Override
					public void onCapture() {
						final Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
						intent.putExtra(MediaStore.EXTRA_OUTPUT, setImageUri());
						startActivityForResult(intent, TAKE_IMAGE);
					}
				});
			}
		});

		txtAlbumEdit.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {

				if (lnrCreateAlbum.getVisibility() == View.GONE) {
					lstAlbumComment.setSelection(0);
					lnrAlbumDetail.setVisibility(View.GONE);
					lnrPhotoList.setVisibility(View.GONE);
					lnrAlbumWriteComment.setVisibility(View.GONE);
					lnrCreateAlbum.setVisibility(View.VISIBLE);
				} else {
					lnrAlbumDetail.setVisibility(View.VISIBLE);
					lnrPhotoList.setVisibility(View.VISIBLE);
					lnrAlbumWriteComment.setVisibility(View.VISIBLE);
					lstAlbumComment.setSelection(0);
					lnrCreateAlbum.setVisibility(View.GONE);
				}

			}
		});

		btnSave.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				hideSoftKeyboard();
				if (edtAlbumName.getText().toString().trim().length() > 0) {
					if (isAlbumDataChanged()) {
						final SeekBar proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
						Address address = IjoomerUtilities.getLatLongFromAddress(edtAlbumLocation.getText().toString().trim());
						provider.addAlbum(IN_ALBUM.get(ID), IN_GROUP_ID, edtAlbumName.getText().toString().trim(), edtAlbumDescription.getText().toString().trim(),
								address != null ? address.getLatitude() : 0, address != null ? address.getLongitude() : 0,
								getPrivacyCode(spnWhoCanSee.getSelectedItem().toString().trim()).toString(), new WebCallListener() {

									@Override
									public void onProgressUpdate(int progressCount) {
										proSeekBar.setProgress(progressCount);
									}

									@Override
									public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
										if (responseCode == 200) {
											updateHeader(provider.getNotificationData());
											IjoomerApplicationConfiguration.setReloadRequired(true);
											saveAlbumDetails();
											lnrAlbumDetail.setVisibility(View.VISIBLE);
											lnrCreateAlbum.setVisibility(View.GONE);
											lnrPhotoList.setVisibility(View.VISIBLE);
											lnrAlbumWriteComment.setVisibility(View.VISIBLE);
										} else {
											IjoomerUtilities.getCustomOkDialog(getString(R.string.photo),
													getString(getResources().getIdentifier("code" + responseCode, "string", getPackageName())), getString(R.string.ok),
													R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

														@Override
														public void NeutralMathod() {
															lnrAlbumDetail.setVisibility(View.VISIBLE);
															lnrCreateAlbum.setVisibility(View.GONE);
															lnrPhotoList.setVisibility(View.VISIBLE);
															lnrAlbumWriteComment.setVisibility(View.VISIBLE);
														}
													});
										}
									}

								});
					} else {
						lnrAlbumDetail.setVisibility(View.VISIBLE);
						lnrCreateAlbum.setVisibility(View.GONE);
						lnrPhotoList.setVisibility(View.VISIBLE);
						lnrAlbumWriteComment.setVisibility(View.VISIBLE);
					}
				} else {
					edtAlbumName.setError(getString(R.string.validation_value_required));
				}

			}
		});
		btnCancle.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				lnrAlbumDetail.setVisibility(View.VISIBLE);
				lnrCreateAlbum.setVisibility(View.GONE);
				lnrPhotoList.setVisibility(View.VISIBLE);
				lnrAlbumWriteComment.setVisibility(View.VISIBLE);
			}
		});

		txtAlbumShare.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				IjoomerUtilities.getShareDialog(new ShareListner() {
					@Override
					public void onClick(String shareOn, Object value, String message) {
						if (shareOn.equals("email")) {
							String[] to = value.toString().split(",");
							Intent i = new Intent(Intent.ACTION_SEND);
							i.setType("text/html");
							i.putExtra(Intent.EXTRA_EMAIL, to);
							i.putExtra(Intent.EXTRA_SUBJECT, String.format(getString(R.string.share_email_subject), IN_ALBUM.get(NAME)));
							i.putExtra(
									Intent.EXTRA_TEXT,
									Html.fromHtml(IjoomerUtilities.prepareEmailBody(message == null ? "" : message,
											getSmartApplication().readSharedPreferences().getString(SP_USERNAME, "") + " " + getString(R.string.saw_this_story_on_the) + " "
													+ getString(R.string.app_name) + " " + getString(R.string.thought_you_should_see_it), IN_ALBUM.get(NAME),
											IN_ALBUM.get(DESCRIPTION), IN_ALBUM.get(SHARELINK), getString(R.string.try_ijoomeradvance), getString(R.string.site_url))));
							try {
								startActivity(Intent.createChooser(i, "Send mail..."));
							} catch (android.content.ActivityNotFoundException ex) {
								ting(getString(R.string.share_email_no_client));
							}
						} else if (shareOn.equals("facebook")) {
							facebookSharing(IN_ALBUM.get(NAME), IN_ALBUM.get(NAME), IN_ALBUM.get(DESCRIPTION), IN_ALBUM.get(SHARELINK), IN_ALBUM.get(THUMB), message == null ? ""
									: message);
						} else if (shareOn.equals("twitter")) {
							try {
								loadNew(IJoomerTwitterShareActivity.class, JomAlbumsDetailsActivity.this, false, "IN_TWIT_MESSAGE", message == null ? "" : message + "\n"
										+ IN_ALBUM.get(SHARELINK), "IN_TWIT_IMAGE", IN_ALBUM.get(THUMB));
							} catch (Throwable e) {
								e.printStackTrace();
							}
						}
					}
				});
			}
		});

		txtAlbumLikeCount.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				if (IN_ALBUM.get(LIKED).equals("1")) {
					provider.unlikeAlbum(IN_ALBUM.get(ID), new WebCallListener() {

						@Override
						public void onProgressUpdate(int progressCount) {

						}

						@Override
						public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
							if (responseCode == 200) {
								updateHeader(provider.getNotificationData());
								IjoomerApplicationConfiguration.setReloadRequired(true);
								IN_ALBUM.put(LIKED, "0");
								IN_ALBUM.put(LIKES, String.valueOf(Integer.parseInt(IN_ALBUM.get(LIKES)) - 1));
								txtAlbumLikeCount.setText(IN_ALBUM.get(LIKES));
							} else {
								responseErrorMessageHandler(responseCode, false);
							}
						}
					});
				} else {
					provider.likeAlbum(IN_ALBUM.get(ID), new WebCallListener() {

						@Override
						public void onProgressUpdate(int progressCount) {

						}

						@Override
						public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
							if (responseCode == 200) {
								updateHeader(provider.getNotificationData());
								IjoomerApplicationConfiguration.setReloadRequired(true);
								IN_ALBUM.put(LIKED, "1");
								IN_ALBUM.put(LIKES, String.valueOf(Integer.parseInt(IN_ALBUM.get(LIKES)) + 1));
								txtAlbumLikeCount.setText(IN_ALBUM.get(LIKES));
								if (IN_ALBUM.get(DISLIKED).equals("1")) {
									IN_ALBUM.put(DISLIKES, String.valueOf(Integer.parseInt(IN_ALBUM.get(DISLIKES)) - 1));
									IN_ALBUM.put(DISLIKED, "0");
									txtAlbumDislikeCount.setText(IN_ALBUM.get(DISLIKES));
								}
							} else {
								responseErrorMessageHandler(responseCode, false);
							}
						}
					});
				}
			}
		});

		txtAlbumDislikeCount.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				if (IN_ALBUM.get(DISLIKED).equals("1")) {
					provider.unlikeAlbum(IN_ALBUM.get(ID), new WebCallListener() {

						@Override
						public void onProgressUpdate(int progressCount) {

						}

						@Override
						public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
							if (responseCode == 200) {
								updateHeader(provider.getNotificationData());
								IjoomerApplicationConfiguration.setReloadRequired(true);
								IN_ALBUM.put(DISLIKED, "0");
								IN_ALBUM.put(DISLIKES, String.valueOf(Integer.parseInt(IN_ALBUM.get(DISLIKES)) - 1));
								txtAlbumDislikeCount.setText(IN_ALBUM.get(DISLIKES));
							} else {
								responseErrorMessageHandler(responseCode, false);
							}
						}
					});
				} else {
					provider.dislikeAlbum(IN_ALBUM.get(ID), new WebCallListener() {

						@Override
						public void onProgressUpdate(int progressCount) {

						}

						@Override
						public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
							if (responseCode == 200) {
								updateHeader(provider.getNotificationData());
								IjoomerApplicationConfiguration.setReloadRequired(true);
								IN_ALBUM.put(DISLIKED, "1");
								IN_ALBUM.put(DISLIKES, String.valueOf(Integer.parseInt(IN_ALBUM.get(DISLIKES)) + 1));
								txtAlbumDislikeCount.setText(IN_ALBUM.get(DISLIKES));
								if (IN_ALBUM.get(LIKED).equals("1")) {
									IN_ALBUM.put(LIKES, String.valueOf(Integer.parseInt(IN_ALBUM.get(LIKES)) - 1));
									IN_ALBUM.put(LIKED, "0");
									txtAlbumLikeCount.setText(IN_ALBUM.get(LIKES));
								}
							} else {
								responseErrorMessageHandler(responseCode, false);
							}
						}
					});
				}
			}
		});

		txtAlbumRemove.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				IjoomerUtilities.getCustomConfirmDialog(getString(R.string.album_title_remove), getString(R.string.are_you_sure), getString(R.string.yes), getString(R.string.no),
						new CustomAlertMagnatic() {

							@Override
							public void PositiveMathod() {
								provider.removeAlbum(IN_ALBUM.get(ID), new WebCallListener() {

									@Override
									public void onProgressUpdate(int progressCount) {

									}

									@Override
									public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
										if (responseCode == 200) {
											updateHeader(provider.getNotificationData());
											IjoomerApplicationConfiguration.setReloadRequired(true);
											finish();
										} else {
											responseErrorMessageHandler(responseCode, false);
										}
									}
								});
							}

							@Override
							public void NegativeMathod() {

							}
						});

			}
		});

		lstAlbumComment.setOnScrollListener(new OnScrollListener() {

			@Override
			public void onScrollStateChanged(AbsListView view, int scrollState) {

			}

			@Override
			public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
				if ((firstVisibleItem + visibleItemCount) >= totalItemCount && totalItemCount > 2) {
					if (!commentProvider.isCalling() && commentProvider.hasNextPage()) {
						listFooterVisible();
						commentProvider.getAlbumCommentList(IN_ALBUM.get(ID), new WebCallListener() {

							@Override
							public void onProgressUpdate(int progressCount) {

							}

							@Override
							public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
								listFooterInvisible();
								if (responseCode == 200) {
									updateHeader(commentProvider.getNotificationData());
									prepareList(data1, true);
								} else {
									responseErrorMessageHandler(responseCode, false);
								}
							}
						});
					}
				}
			}
		});
	}

	@SuppressWarnings("unchecked")
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (resultCode == Activity.RESULT_OK) {
			Intent intent = new Intent(this, JomUplodPhotosActivity.class);
			String path = "";
			switch (requestCode) {
			case PICK_IMAGE_MULTIPLE:
				intent.putExtra("IN_ALBUMID", IN_ALBUM.get(ID));
				intent.putExtra("IN_PHOTOPATHS", data.getStringExtra("data"));
				startActivityForResult(intent, UPLOAD_PHOTO);
				break;
			case PICK_IMAGE:
				path = getAbsolutePath(data.getData()) + "|";
				intent.putExtra("IN_ALBUMID", IN_ALBUM.get(ID));
				intent.putExtra("IN_PHOTOPATHS", path);
				startActivityForResult(intent, UPLOAD_PHOTO);
				break;
			case TAKE_IMAGE:
				path = getImagePath() + "|";
				intent.putExtra("IN_ALBUMID", IN_ALBUM.get(ID));
				intent.putExtra("IN_PHOTOPATHS", path);
				startActivityForResult(intent, UPLOAD_PHOTO);
				break;
			case UPLOAD_PHOTO:
				int temp = Integer.parseInt(PHOTO_COUNT) + data.getIntExtra("IN_PHOTO_UPLOAD_COUNT", 0);
				JomPhotoDetailsActivity.IN_TOTAL_COUNT = temp;
				break;
			case GET_ADDRESS_FROM_MAP:
				edtAlbumLocation.setText(((HashMap<String, String>) data.getSerializableExtra("MAP_ADDRESSS_DATA")).get("address"));
				break;
			}
		}
	}

	@Override
	public void onCheckedChanged(RadioGroup arg0, int arg1) {

	}

	/**
	 * Class method
	 */

	@SuppressWarnings("unchecked")
	private void getIntentData() {
		IN_ALBUM = ((HashMap<String, String>) getIntent().getSerializableExtra("IN_ALBUM")) == null ? new HashMap<String, String>() : ((HashMap<String, String>) getIntent()
				.getSerializableExtra("IN_ALBUM"));
		IN_USERID = getIntent().getStringExtra("IN_USERID") == null ? "0" : getIntent().getStringExtra("IN_USERID");
		IN_GROUP_ID = getIntent().getStringExtra("IN_GROUP_ID") == null ? "0" : getIntent().getStringExtra("IN_GROUP_ID");
		IN_PROFILE_COVER = getIntent().getStringExtra("IN_PROFILE_COVER") == null ? "0" : getIntent().getStringExtra("IN_PROFILE_COVER");
		PHOTO_COUNT = IN_ALBUM.get(COUNT) == null ? "0" : IN_ALBUM.get(COUNT);
		IN_GROUP_UPLOAD_PHOTO = getIntent().getStringExtra("IN_GROUP_UPLOAD_PHOTO") == null ? "0" : getIntent().getStringExtra("IN_GROUP_UPLOAD_PHOTO");

		setIntentAlbumDetails();
	}

	private void setIntentAlbumDetails() {

		if (IN_ALBUM.get(DELETEALLOWED).equals("1")) {
			txtAlbumRemove.setVisibility(View.VISIBLE);
			txtAlbumEdit.setVisibility(View.VISIBLE);
			txtAlbumUploadPhoto.setVisibility(View.VISIBLE);
		}

		if (IN_ALBUM.containsKey(EDITALBUM) && IN_ALBUM.get(EDITALBUM).equals("1")) {
			txtAlbumEdit.setVisibility(View.VISIBLE);
		}
		if (IN_GROUP_UPLOAD_PHOTO.equals("1")) {
			txtAlbumUploadPhoto.setVisibility(View.VISIBLE);
		}

		if (txtAlbumRemove.getVisibility() == View.GONE && txtAlbumEdit.getVisibility() == View.GONE && txtAlbumUploadPhoto.getVisibility() == View.GONE) {
			lnrHeader.setVisibility(View.GONE);
		}

		androidQuery.id(imgAlbumAvatar).image(IN_ALBUM.get(THUMB), true, true, getDeviceWidth(), 0);
		txAlbumBy.setMovementMethod(LinkMovementMethod.getInstance());
		txAlbumBy.setText(addClickablePart(Html.fromHtml(String.format(getString(R.string.by), IN_ALBUM.get(USER_NAME))), IN_ALBUM), BufferType.SPANNABLE);
		setAlbumDetails();

		txtAlbumLikeCount.setText(IN_ALBUM.get(LIKES));
		txtAlbumDislikeCount.setText(IN_ALBUM.get(DISLIKES));
		txtAlbumCommentCount.setText(IN_ALBUM.get(COMMENTCOUNT));

		edtAlbumName.setText(IN_ALBUM.get(NAME));

	}

	private void getComment() {
		commentProvider.restorePagingSettings();
		commentProvider.getAlbumCommentList(IN_ALBUM.get(ID), new WebCallListener() {

			@Override
			public void onProgressUpdate(int progressCount) {

			}

			@Override
			public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
				if (responseCode == 200) {
					updateHeader(commentProvider.getNotificationData());
					prepareList(data1, false);
					commentAdapter = getListAdapter();
					if (!IN_PROFILE_COVER.equals("0")) {
						lstAlbumComment.setAdapter(null);
					} else {
						lstAlbumComment.setAdapter(commentAdapter);
					}

				} else {
					if (responseCode != 204) {
						responseErrorMessageHandler(responseCode, false);
					}
				}
			}
		});
	}

	private void setAlbumDetails() {

		edtAlbumName.setText(IN_ALBUM.get(NAME));
		edtAlbumLocation.setText(IN_ALBUM.get(LOCATION));
		edtAlbumDescription.setText(IN_ALBUM.get(DESCRIPTION));
		spnWhoCanSee.setSelection(getPrivacyIndex(IN_ALBUM.get(PERMISSION)));

		txtAlbumTitle.setText(IN_ALBUM.get(NAME));
		if (IN_ALBUM.get(LOCATION).trim().length() <= 0) {
			txtAlbumDateLocation.setText(IN_ALBUM.get(DATE));
		} else {
			txtAlbumDateLocation.setText(IN_ALBUM.get(DATE) + " @ " + IN_ALBUM.get(LOCATION));
		}
		txtAlbumPrivacy.setText(getPrivacyString(IN_ALBUM.get(PERMISSION)));
		txtAlbumDescription.setText(IN_ALBUM.get(DESCRIPTION));

	}

	private void saveAlbumDetails() {

		IN_ALBUM.put(NAME, edtAlbumName.getText().toString().trim());
		IN_ALBUM.put(LOCATION, edtAlbumLocation.getText().toString().trim());
		IN_ALBUM.put(DESCRIPTION, edtAlbumDescription.getText().toString().trim());
		IN_ALBUM.put(PERMISSION, spnWhoCanSee.getSelectedItem().toString());
		setAlbumDetails();
	}

	public int calculateheight() {
		int calculateHeight;
		int totalCount = Integer.parseInt(IN_ALBUM.get(COUNT));
		if (totalCount < pageLimit) {
			calculateHeight = (((totalCount % 4 == 0 ? totalCount / 4 : totalCount / 4 + 1) * 270) / 3);

			return convertSizeToDeviceDependent(calculateHeight);

		}
		return convertSizeToDeviceDependent(270);
	}

	public void listFooterVisible() {
		listFooter.setVisibility(View.VISIBLE);
	}

	public void listFooterInvisible() {
		listFooter.setVisibility(View.GONE);
	}

	private boolean isAlbumDataChanged() {
		boolean isChaged = false;
		if (!(edtAlbumName.getText().toString().equals(IN_ALBUM.get(NAME)) && edtAlbumDescription.getText().toString().equals(IN_ALBUM.get(DESCRIPTION))
				&& edtAlbumLocation.getText().toString().equals(IN_ALBUM.get(LOCATION)) && getPrivacyCode(spnWhoCanSee.getSelectedItem().toString()).equals(
				IN_ALBUM.get(PERMISSION)))) {
			isChaged = true;
		}
		return isChaged;
	}

	public ArrayList<JomPhotoFragment> getPhotoFragmetStack() {
		return photoFragmetStack;
	}

	public void prepareList(ArrayList<HashMap<String, String>> data, boolean append) {
		if (data != null) {
			if (!append) {
				listData.clear();
			}
			for (HashMap<String, String> hashMap : data) {
				SmartListItem item = new SmartListItem();
				item.setItemLayout(R.layout.jom_comment_list_item);
				ArrayList<Object> obj = new ArrayList<Object>();
				obj.add(hashMap);
				item.setValues(obj);
				if (append) {
					commentAdapter.add(item);
				} else {
					listData.add(item);
				}
			}

		}
	}

	private void responseErrorMessageHandler(final int responseCode, final boolean finishActivityOnConnectionProblem) {
		IjoomerUtilities.getCustomOkDialog(getString(R.string.photo), getString(getResources().getIdentifier("code" + responseCode, "string", getPackageName())),
				getString(R.string.ok), R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

					@Override
					public void NeutralMathod() {
						if (responseCode == 599 && finishActivityOnConnectionProblem) {
							finish();
						}
					}
				});
	}

	/**
	 * List adapter
	 */

	private SmartListAdapterWithHolder getListAdapter() {
		SmartListAdapterWithHolder adapterWithHolder = new SmartListAdapterWithHolder(JomAlbumsDetailsActivity.this, R.layout.jom_comment_list_item, listData, new ItemView() {
			@Override
			public View setItemView(final int position, View v, SmartListItem item, ViewHolder holder) {
				holder.imgCommentUserAvatar = (ImageView) v.findViewById(R.id.imgCommentUserAvatar);
				holder.txtCommentUserName = (IjoomerTextView) v.findViewById(R.id.txtCommentUserName);
				holder.txtCommentDate = (IjoomerTextView) v.findViewById(R.id.txtCommentDate);
				holder.txtCommentTitle = (IjoomerTextView) v.findViewById(R.id.txtCommentTitle);
				holder.btnCommentRemove = (IjoomerButton) v.findViewById(R.id.btnCommentRemove);
				holder.btnCommentRemove.setVisibility(View.GONE);
				@SuppressWarnings("unchecked")
				final HashMap<String, String> row = (HashMap<String, String>) item.getValues().get(0);

				androidQuery.id(holder.imgCommentUserAvatar).image(row.get(USER_AVATAR), true, true, getDeviceWidth(), 0);
				holder.txtCommentTitle.setText(row.get(COMMENT));
				holder.txtCommentUserName.setText(row.get(USER_NAME));
				holder.txtCommentDate.setText(row.get(DATE));
				if (row.containsKey(DELETEALLOWED) && row.get(DELETEALLOWED).equals("1")) {
					holder.btnCommentRemove.setVisibility(View.VISIBLE);
				}

				holder.btnCommentRemove.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View arg0) {
						IjoomerUtilities.getCustomConfirmDialog(getString(R.string.album), getString(R.string.are_you_sure), getString(R.string.yes), getString(R.string.no),
								new CustomAlertMagnatic() {

									@Override
									public void PositiveMathod() {
										provider.removeAlbumComment(row.get(ID), new WebCallListener() {
											final SeekBar proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));

											@Override
											public void onProgressUpdate(int progressCount) {
												proSeekBar.setProgress(progressCount);
											}

											@Override
											public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
												if (responseCode == 200) {
													updateHeader(provider.getNotificationData());
													commentAdapter.remove(commentAdapter.getItem(position));
													IN_ALBUM.put(COMMENTCOUNT, String.valueOf(Integer.parseInt(IN_ALBUM.get(COMMENTCOUNT)) - 1));
													txtAlbumCommentCount.setText(IN_ALBUM.get(COMMENTCOUNT));
												} else {
													responseErrorMessageHandler(responseCode, false);
												}

											}
										});
									}

									@Override
									public void NegativeMathod() {

									}
								});

					}
				});

				holder.imgCommentUserAvatar.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View arg0) {

						if (row.get(USER_PROFILE).equals("1")) {
							gotoProfile(row.get(USER_ID));
						}
					}
				});
				return v;
			}

			@Override
			public View setItemView(int position, View v, SmartListItem item) {
				return null;
			}
		});
		return adapterWithHolder;
	}

	/**
	 * Custom class
	 */

	private class PageAdapter extends FragmentStatePagerAdapter {

		private boolean isInitial = true;

		public PageAdapter(FragmentManager fm) {
			super(fm);
		}

		public int getItemPosition(Object object) {
			return POSITION_NONE;
		}

		@Override
		public Fragment getItem(int pos) {

			try {
				return photoFragmetStack.get(pos);
			} catch (Exception e) {
				JomPhotoFragment fragment = new JomPhotoFragment(pos + 1, IN_ALBUM, IN_USERID, IN_PROFILE_COVER);
				if (isInitial) {
					fragment.setInitial(true);
					isInitial = false;
				}
				photoFragmetStack.add(fragment);
				return fragment;
			}
		}

		@Override
		public int getCount() {
			return (Integer.parseInt(PHOTO_COUNT) % pageLimit) == 0 ? (Integer.parseInt(PHOTO_COUNT) / pageLimit) : (Integer.parseInt(PHOTO_COUNT) / pageLimit) + 1;
		}

	}

}
