package com.ijoomer.components.jomsocial;

import java.util.ArrayList;
import java.util.HashMap;

import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RadioGroup;
import android.widget.SeekBar;

import com.androidquery.AQuery;
import com.ijoomer.common.classes.IjoomerUtilities;
import com.ijoomer.common.classes.ViewHolder;
import com.ijoomer.common.configuration.IjoomerApplicationConfiguration;
import com.ijoomer.customviews.IjoomerEditText;
import com.ijoomer.customviews.IjoomerTextView;
import com.ijoomer.library.jomsocial.JomFriendsDataProvider;
import com.ijoomer.library.jomsocial.JomMembersDataProvider;
import com.ijoomer.src.R;
import com.ijoomer.weservice.WebCallListener;
import com.smart.framework.CustomAlertNeutral;
import com.smart.framework.ItemView;
import com.smart.framework.SmartListAdapterWithHolder;
import com.smart.framework.SmartListItem;

public class JomFriendListActivity extends JomMasterActivity {

	private LinearLayout listFooter;
	private ListView lstFriend;
	private ListView lstMember;
	private IjoomerTextView txtFriend;
	private IjoomerTextView txtMember;
	private IjoomerTextView txtMap;
	private IjoomerTextView txtPageOf;
	private IjoomerEditText editSearch;
	private ImageView imgSearch;

	private AQuery androidQuery;
	private ArrayList<SmartListItem> listDataFriend = new ArrayList<SmartListItem>();
	private ArrayList<SmartListItem> listDataMember = new ArrayList<SmartListItem>();
	private ArrayList<HashMap<String, String>> friendData;
	private ArrayList<HashMap<String, String>> memberData;
	private SmartListAdapterWithHolder listAdapterWithHolderFriend;
	private SmartListAdapterWithHolder listAdapterWithHolderMember;

	private JomFriendsDataProvider providerFriend;
	private JomMembersDataProvider providerMember;
	private JomMembersDataProvider providerSearch;

	final private String FRIEND = "friend";
	final private String MEMBER = "member";
	private String IN_USERID = "0";
	private String CURRENT_LIST = FRIEND;
	private boolean searchStarted = false;

	/**
	 * Overrides method
	 */

	@Override
	public int setLayoutId() {
		return R.layout.jom_friend_member_list;
	}

	@Override
	public void initComponents() {

		listFooter = (LinearLayout) LayoutInflater.from(this).inflate(R.layout.ijoomer_list_footer, null);
		lstMember = (ListView) findViewById(R.id.lstMember);
		lstFriend = (ListView) findViewById(R.id.lstFriend);
		lstFriend.addFooterView(listFooter);
		lstMember.addFooterView(listFooter);
		txtFriend = (IjoomerTextView) findViewById(R.id.txtFriend);
		txtMember = (IjoomerTextView) findViewById(R.id.txtMember);
		txtMap = (IjoomerTextView) findViewById(R.id.txtMap);
		txtPageOf = (IjoomerTextView) findViewById(R.id.txtPageOf);
		txtPageOf.setText(String.format(getString(R.string.page_of), 1, 1));
		editSearch = (IjoomerEditText) findViewById(R.id.editSearch);
		imgSearch = (ImageView) findViewById(R.id.imgSearch);

		androidQuery = new AQuery(this);
		providerFriend = new JomFriendsDataProvider(this);
		providerSearch = new JomMembersDataProvider(this);
		providerMember = new JomMembersDataProvider(this);

		getIntentData();
		getFriendList();
	}

	@Override
	public void prepareViews() {
		txtFriend.setTextColor(getResources().getColor(R.color.blue));
	}

	@Override
	protected void onResume() {
		super.onResume();
		if (IjoomerApplicationConfiguration.isReloadRequired()) {
			IjoomerApplicationConfiguration.setReloadRequired(false);
			friendData = null;
			if (CURRENT_LIST.equals(FRIEND)) {
				getFriendList();
			}
		}
	}

	@Override
	public void setActionListeners() {

		txtMember.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				txtFriend.setTextColor(getResources().getColor(R.color.txt_color));
				txtMap.setTextColor(getResources().getColor(R.color.txt_color));
				txtMember.setTextColor(getResources().getColor(R.color.blue));

				CURRENT_LIST = MEMBER;
				if (memberData == null) {
					getMemberList();
				} else {
					lstFriend.setVisibility(View.GONE);
					lstMember.setVisibility(View.VISIBLE);
					txtPageOf.setText(String.format(getString(R.string.page_of), providerMember.getPageNo() - 1, providerMember.getTotalPageCount()));
				}
			}
		});

		txtFriend.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				txtFriend.setTextColor(getResources().getColor(R.color.blue));
				txtMap.setTextColor(getResources().getColor(R.color.txt_color));
				txtMember.setTextColor(getResources().getColor(R.color.txt_color));
				CURRENT_LIST = FRIEND;
				if (friendData == null) {
					getFriendList();
				} else {
					lstFriend.setVisibility(View.VISIBLE);
					lstMember.setVisibility(View.GONE);
					txtPageOf.setText(String.format(getString(R.string.page_of), providerMember.getPageNo() - 1, providerMember.getTotalPageCount()));

				}
			}
		});
		txtMap.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {

				try {
					loadNew(JomMapActivity.class, JomFriendListActivity.this, false, "IN_MAPLIST", lstFriend.getVisibility() == View.VISIBLE ? friendData : memberData,
							"IN_SHOW_BUBBLE", true);
				} catch (Throwable e) {
					e.printStackTrace();
				}
			}
		});

		lstFriend.setOnItemClickListener(new OnItemClickListener() {

			@SuppressWarnings("unchecked")
			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, final int pos, long arg3) {
				if (((HashMap<String, String>) ((SmartListItem) lstFriend.getAdapter().getItem(pos)).getValues().get(0)).get(USER_PROFILE).equalsIgnoreCase("1")) {
					gotoProfile(((HashMap<String, String>) ((SmartListItem) lstFriend.getAdapter().getItem(pos)).getValues().get(0)).get(USER_ID));
				}
			}
		});

		lstMember.setOnItemClickListener(new OnItemClickListener() {

			@SuppressWarnings("unchecked")
			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, final int pos, long arg3) {
				if (((HashMap<String, String>) ((SmartListItem) lstMember.getAdapter().getItem(pos)).getValues().get(0)).get(USER_PROFILE).equalsIgnoreCase("1")) {
					gotoProfile(((HashMap<String, String>) ((SmartListItem) lstMember.getAdapter().getItem(pos)).getValues().get(0)).get(USER_ID));
				}
			}
		});

		lstFriend.setOnScrollListener(new OnScrollListener() {

			@Override
			public void onScrollStateChanged(AbsListView view, int scrollState) {

			}

			@Override
			public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
				if ((firstVisibleItem + visibleItemCount) >= totalItemCount && totalItemCount > 1) {
					if (!providerFriend.isCalling() && providerFriend.hasNextPage()) {
						if (IN_USERID == null || IN_USERID.equals("0")) {
							listFooterVisible();
							providerFriend.getFriendsList(new WebCallListener() {

								@Override
								public void onProgressUpdate(int progressCount) {
								}

								@Override
								public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
									listFooterInvisible();
									if (responseCode == 200) {
										updateHeader(providerFriend.getNotificationData());
										prepareListFriend(data1, true);
										txtPageOf.setText(String.format(getString(R.string.page_of), providerFriend.getPageNo() - 1, providerFriend.getTotalPageCount()));

									} else {
										responseErrorMessageHandler(responseCode, false);
									}
								}
							});
						} else {
							listFooterVisible();
							providerFriend.getFriendsList(IN_USERID, new WebCallListener() {

								@Override
								public void onProgressUpdate(int progressCount) {
								}

								@Override
								public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
									listFooterInvisible();
									if (responseCode == 200) {
										updateHeader(providerFriend.getNotificationData());
										prepareListFriend(data1, true);
										txtPageOf.setText(String.format(getString(R.string.page_of), providerFriend.getPageNo() - 1, providerFriend.getTotalPageCount()));

									} else {
										responseErrorMessageHandler(responseCode, false);
									}
								}
							});
						}

					}
				}
			}
		});

		lstMember.setOnScrollListener(new OnScrollListener() {

			@Override
			public void onScrollStateChanged(AbsListView view, int scrollState) {

			}

			@Override
			public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
				if ((firstVisibleItem + visibleItemCount) >= totalItemCount && totalItemCount > 1) {
					if (!providerMember.isCalling() && providerMember.hasNextPage()) {
						listFooterVisible();
						providerMember.getMembersList(new WebCallListener() {

							@Override
							public void onProgressUpdate(int progressCount) {
							}

							@Override
							public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
								listFooterInvisible();
								if (responseCode == 200) {
									updateHeader(providerMember.getNotificationData());
									prepareListMember(data1, true);
									txtPageOf.setText(String.format(getString(R.string.page_of), providerMember.getPageNo() - 1, providerMember.getTotalPageCount()));
									lstFriend.setVisibility(View.GONE);
									lstMember.setVisibility(View.VISIBLE);
								} else {
									responseErrorMessageHandler(responseCode, false);
								}
							}
						});
					}
				}
			}
		});

		imgSearch.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				hideSoftKeyboard();
				providerSearch.restorePagingSettings();
				if (editSearch.getText().toString().trim().length() > 0) {
					searchStarted = true;
					if (lstFriend.getVisibility() == View.VISIBLE) {
						listFooterVisible();
						prepareListFriend(providerFriend.searchFriend(editSearch.getText().toString().trim()), false);
						listAdapterWithHolderFriend = getFriendListAdapter();
						lstFriend.setAdapter(listAdapterWithHolderFriend);
						listFooterInvisible();
						txtPageOf.setText(String.format(getString(R.string.page_of), providerFriend.getPageNo() - 1, providerFriend.getTotalPageCount() - 1));
					} else {
						listFooterVisible();
						providerSearch.getSearchMembersList(editSearch.getText().toString().trim(), new WebCallListener() {

							@Override
							public void onProgressUpdate(int progressCount) {

							}

							@Override
							public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
								listFooterInvisible();
								if (responseCode == 200) {
									prepareListMember(data1, false);
									listAdapterWithHolderMember = getMemberListAdapter();
									lstMember.setAdapter(listAdapterWithHolderMember);
								} else {
									responseErrorMessageHandler(responseCode, false);
								}
							}
						});
						txtPageOf.setText(String.format(getString(R.string.page_of), providerSearch.getPageNo(), providerSearch.getTotalPageCount()));
					}

				} else {
					editSearch.setError(getString(R.string.validation_value_required));
				}
			}
		});
		editSearch.addTextChangedListener(new TextWatcher() {

			@Override
			public void onTextChanged(CharSequence c, int arg1, int arg2, int count) {

			}

			@Override
			public void beforeTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {
			}

			@Override
			public void afterTextChanged(Editable edit) {
				if (edit.length() == 0) {
					hideSoftKeyboard();
					searchStarted = false;
					if (lstFriend.getVisibility() == View.VISIBLE) {
						prepareListFriend(providerFriend.getFriendFromDB(), false);
						listAdapterWithHolderFriend = getFriendListAdapter();
						lstFriend.setAdapter(listAdapterWithHolderFriend);
						txtPageOf.setText(String.format(getString(R.string.page_of), providerFriend.getPageNo() - 1, providerFriend.getTotalPageCount() - 1));
					} else {
						prepareListMember(providerMember.getMemmberFromDB(), false);
						listAdapterWithHolderMember = getMemberListAdapter();
						lstMember.setAdapter(listAdapterWithHolderMember);
						providerSearch.restorePagingSettings();
						txtPageOf.setText(String.format(getString(R.string.page_of), providerMember.getPageNo() - 1, providerMember.getTotalPageCount() - 1));
					}
				}
			}
		});

	}

	@Override
	public void onCheckedChanged(RadioGroup arg0, int arg1) {

	}

	/**
	 * Class method
	 */
	private void getIntentData() {
		IN_USERID = getIntent().getStringExtra("IN_USERID") == null ? "0" : getIntent().getStringExtra("IN_USERID");
	}

	public void listFooterVisible() {
		listFooter.setVisibility(View.VISIBLE);
	}

	public void listFooterInvisible() {
		listFooter.setVisibility(View.GONE);
	}

	private void responseErrorMessageHandler(final int responseCode, final boolean finishActivityOnConnectionProblem) {
		IjoomerUtilities.getCustomOkDialog(getString(R.string.friend), getString(getResources().getIdentifier("code" + responseCode, "string", getPackageName())),
				getString(R.string.ok), R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

					@Override
					public void NeutralMathod() {
						if (responseCode == 599 && finishActivityOnConnectionProblem) {
							finish();
						}
					}
				});
	}

	private void getFriendList() {
		providerFriend.restorePagingSettings();
		if (IN_USERID == null || IN_USERID.equals("0")) {
			providerFriend.getFriendsList(new WebCallListener() {

				final SeekBar proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));

				@Override
				public void onProgressUpdate(int progressCount) {
					proSeekBar.setProgress(progressCount);
				}

				@Override
				public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
					if (responseCode == 200) {
						updateHeader(providerFriend.getNotificationData());
						prepareListFriend(data1, false);
						listAdapterWithHolderFriend = getFriendListAdapter();
						lstMember.setVisibility(View.GONE);
						lstFriend.setVisibility(View.VISIBLE);
						lstFriend.setAdapter(listAdapterWithHolderFriend);
						txtPageOf.setText(String.format(getString(R.string.page_of), providerFriend.getPageNo() - 1, providerFriend.getTotalPageCount()));

					} else {
						responseErrorMessageHandler(responseCode, true);
					}
				}
			});
		} else {
			providerFriend.getFriendsList(IN_USERID, new WebCallListener() {

				final SeekBar proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));

				@Override
				public void onProgressUpdate(int progressCount) {
					proSeekBar.setProgress(progressCount);
				}

				@Override
				public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
					if (responseCode == 200) {
						updateHeader(providerFriend.getNotificationData());
						prepareListFriend(data1, false);
						lstMember.setVisibility(View.GONE);
						lstFriend.setVisibility(View.VISIBLE);
						listAdapterWithHolderFriend = getFriendListAdapter();
						lstFriend.setAdapter(listAdapterWithHolderFriend);
						txtPageOf.setText(String.format(getString(R.string.page_of), providerFriend.getPageNo() - 1, providerFriend.getTotalPageCount()));

					} else {
						responseErrorMessageHandler(responseCode, true);
					}
				}
			});
		}
	}

	private void getMemberList() {
		providerMember.restorePagingSettings();
		providerMember.getMembersList(new WebCallListener() {

			final SeekBar proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));

			@Override
			public void onProgressUpdate(int progressCount) {
				proSeekBar.setProgress(progressCount);
			}

			@Override
			public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
				if (responseCode == 200) {
					prepareListMember(data1, false);
					updateHeader(providerMember.getNotificationData());
					listAdapterWithHolderMember = getMemberListAdapter();
					lstMember.setAdapter(listAdapterWithHolderMember);
					txtPageOf.setText(String.format(getString(R.string.page_of), providerMember.getPageNo() - 1, providerMember.getTotalPageCount()));
					lstFriend.setVisibility(View.GONE);
					lstMember.setVisibility(View.VISIBLE);
				} else {
					responseErrorMessageHandler(responseCode, false);
				}
			}
		});

	}

	public void prepareListFriend(ArrayList<HashMap<String, String>> data, boolean append) {
		if (data != null) {
			friendData = data;
			if (!append) {
				listDataFriend.clear();
			}
			for (HashMap<String, String> hashMap : data) {
				SmartListItem item = new SmartListItem();
				item.setItemLayout(R.layout.jom_friend_list_item);
				ArrayList<Object> obj = new ArrayList<Object>();
				obj.add(hashMap);
				item.setValues(obj);
				if (append) {
					listAdapterWithHolderFriend.add(item);
				} else {
					listDataFriend.add(item);
				}
			}
		}
	}

	public void prepareListMember(ArrayList<HashMap<String, String>> data, boolean append) {
		if (data != null) {
			memberData = data;
			if (!append) {
				listDataMember.clear();
			}
			for (HashMap<String, String> hashMap : data) {
				SmartListItem item = new SmartListItem();
				item.setItemLayout(R.layout.jom_friend_list_item);
				ArrayList<Object> obj = new ArrayList<Object>();
				obj.add(hashMap);
				item.setValues(obj);
				if (append) {
					listAdapterWithHolderMember.add(item);
				} else {
					listDataMember.add(item);
				}
			}

		}
	}

	/**
	 * List adapter
	 */
	private SmartListAdapterWithHolder getFriendListAdapter() {

		SmartListAdapterWithHolder adapter = new SmartListAdapterWithHolder(JomFriendListActivity.this, R.layout.jom_friend_list_item, listDataFriend, new ItemView() {

			@Override
			public View setItemView(int position, View v, SmartListItem item, ViewHolder holder) {
				holder.friendmembertxtName = (IjoomerTextView) v.findViewById(R.id.txtName);
				holder.friendmemberImage = (ImageView) v.findViewById(R.id.imgFriend);
				holder.friendmemberimgOnlineStatus = (ImageView) v.findViewById(R.id.imgOnlineStatus);
				holder.friendmemberimgOnlineStatus.setImageDrawable(getResources().getDrawable(R.drawable.jom_friend_member_offline));

				@SuppressWarnings("unchecked")
				final HashMap<String, String> friend = (HashMap<String, String>) item.getValues().get(0);
				holder.friendmembertxtName.setText(friend.get(USER_NAME));
				androidQuery.id(holder.friendmemberImage).image(friend.get(USER_AVATAR), true, true, getDeviceWidth(), 0);
				if (friend.get(USER_ONLINE).equalsIgnoreCase("1")) {
					holder.friendmemberimgOnlineStatus.setImageDrawable(getResources().getDrawable(R.drawable.jom_friend_member_online));
				}

				return v;
			}

			@Override
			public View setItemView(int position, View v, SmartListItem item) {
				return null;
			}
		});
		return adapter;
	}

	private SmartListAdapterWithHolder getMemberListAdapter() {
		SmartListAdapterWithHolder adapter = listAdapterWithHolderMember = new SmartListAdapterWithHolder(JomFriendListActivity.this, R.layout.jom_friend_list_item,
				listDataMember, new ItemView() {

					@Override
					public View setItemView(int position, View v, SmartListItem item, ViewHolder holder) {
						holder.friendmembertxtName = (IjoomerTextView) v.findViewById(R.id.txtName);
						holder.friendmemberImage = (ImageView) v.findViewById(R.id.imgFriend);
						holder.friendmemberimgOnlineStatus = (ImageView) v.findViewById(R.id.imgOnlineStatus);
						holder.friendmemberimgOnlineStatus.setImageDrawable(getResources().getDrawable(R.drawable.jom_friend_member_offline));

						if (position < listDataMember.size()) {

							@SuppressWarnings("unchecked")
							final HashMap<String, String> friend = (HashMap<String, String>) item.getValues().get(0);
							holder.friendmembertxtName.setText(friend.get(USER_NAME));
							androidQuery.id(holder.friendmemberImage).image(friend.get(USER_AVATAR), true, true, getDeviceWidth(), 0);
							if (friend.get(USER_ONLINE).equalsIgnoreCase("1")) {
								holder.friendmemberimgOnlineStatus.setImageDrawable(getResources().getDrawable(R.drawable.jom_friend_member_online));
							}
						}

						return v;
					}

					@Override
					public View setItemView(int position, View v, SmartListItem item) {
						return null;
					}

				});
		return adapter;
	}

}
