package com.ijoomer.components.jomsocial;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;

import android.app.Activity;
import android.content.Intent;
import android.location.Address;
import android.text.Html;
import android.text.method.LinkMovementMethod;
import android.text.method.ScrollingMovementMethod;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RadioGroup;
import android.widget.SeekBar;
import android.widget.Spinner;
import android.widget.TextView.BufferType;

import com.androidquery.AQuery;
import com.ijoomer.common.classes.IjoomerUtilities;
import com.ijoomer.common.classes.ViewHolder;
import com.ijoomer.common.configuration.IjoomerApplicationConfiguration;
import com.ijoomer.common.configuration.IjoomerGlobalConfiguration;
import com.ijoomer.customviews.IjoomerButton;
import com.ijoomer.customviews.IjoomerEditText;
import com.ijoomer.customviews.IjoomerTextView;
import com.ijoomer.library.jomsocial.JomGalleryDataProvider;
import com.ijoomer.map.IjoomerMapAddress;
import com.ijoomer.src.R;
import com.ijoomer.weservice.WebCallListener;
import com.smart.framework.CustomAlertNeutral;
import com.smart.framework.ItemView;
import com.smart.framework.SmartListAdapterWithHolder;
import com.smart.framework.SmartListItem;

public class JomAlbumsActivity extends JomMasterActivity {

	private ListView lstAlbum;
	private LinearLayout lnrCreateAlbum;
	private LinearLayout lnrPhotosHeader;
	private LinearLayout listFooter;
	private IjoomerTextView txtAllPhotos;
	private IjoomerTextView txtMyPhotos;
	private IjoomerTextView txtAddAlbum;
	private IjoomerEditText edtAlbumName;
	private IjoomerEditText edtAlbumLocation;
	private IjoomerEditText edtAlbumDescription;
	private ImageView imgMap;
	private IjoomerButton btnAddAlbum;
	private IjoomerButton btnCancle;
	private IjoomerButton btnCreate;
	private Spinner spnWhoCanSee;
	private SeekBar proSeekBar;

	private AQuery androidQuery;
	private ArrayList<SmartListItem> listData = new ArrayList<SmartListItem>();
	private ArrayList<HashMap<String, String>> allAlbumList;
	private ArrayList<HashMap<String, String>> myAlbumList;
	private SmartListAdapterWithHolder adapterAlbum;

	private JomGalleryDataProvider providerAllPhotos;
	private JomGalleryDataProvider providerMyPhotos;

	final private String ALLPHOTOS = "allphotos";
	final private String MYPHOTOS = "myphotos";
	final private int GET_ADDRESS_FROM_MAP = 1;
	private String IN_USERID;
	private String IN_GROUP_ID;
	private String IN_PROFILE_COVER;
	private String IN_GROUP_ADD_ALBUM;
	private String IN_GROUP_UPLOAD_PHOTO;
	private String address;
	private String currentList = MYPHOTOS;

	/**
	 * Overrides method
	 */
	@Override
	public int setLayoutId() {
		return R.layout.jom_album;
	}

	@Override
	public void initComponents() {

		lstAlbum = (ListView) findViewById(R.id.lstAlbum);
		lnrPhotosHeader = (LinearLayout) findViewById(R.id.lnrPhotosHeader);
		listFooter = (LinearLayout) LayoutInflater.from(this).inflate(R.layout.ijoomer_list_footer, null);
		lnrCreateAlbum = (LinearLayout) findViewById(R.id.lnrCreateAlbum);
		lstAlbum.addFooterView(listFooter, null, false);
		lstAlbum.setAdapter(null);
		txtAllPhotos = (IjoomerTextView) findViewById(R.id.txtAllPhotos);
		txtMyPhotos = (IjoomerTextView) findViewById(R.id.txtMyPhotos);
		txtAddAlbum = (IjoomerTextView) findViewById(R.id.txtAddAlbum);
		edtAlbumName = (IjoomerEditText) findViewById(R.id.edtAlbumName);
		edtAlbumLocation = (IjoomerEditText) findViewById(R.id.edtAlbumLocation);
		edtAlbumDescription = (IjoomerEditText) findViewById(R.id.edtAlbumDescription);
		btnAddAlbum = (IjoomerButton) findViewById(R.id.btnAddAlbum);
		btnCancle = (IjoomerButton) findViewById(R.id.btnCancle);
		btnCreate = (IjoomerButton) findViewById(R.id.btnCreate);
		spnWhoCanSee = (Spinner) findViewById(R.id.spnWhoCanSee);
		imgMap = (ImageView) findViewById(R.id.imgMap);

		androidQuery = new AQuery(this);
		providerAllPhotos = new JomGalleryDataProvider(this);
		providerMyPhotos = new JomGalleryDataProvider(this);

		getIntentData();
	}

	@Override
	public void prepareViews() {

		spnWhoCanSee.setAdapter(new IjoomerUtilities.MyCustomAdapter(this, new ArrayList<String>(Arrays.asList(getResources().getStringArray(R.array.wall_post_type)))));
		txtMyPhotos.setTextColor(getResources().getColor(R.color.blue));

		if (!IN_GROUP_ID.equals("0")) {
			txtAllPhotos.setVisibility(View.GONE);
			txtMyPhotos.setVisibility(View.GONE);
			if (!IN_GROUP_ADD_ALBUM.equals("0")) {
				txtAddAlbum.setVisibility(View.GONE);
				btnAddAlbum.setVisibility(View.VISIBLE);
			}
			currentList = ALLPHOTOS;
			lnrPhotosHeader.setVisibility(View.GONE);
			getAllPhotos(true);
		} else if (!IN_PROFILE_COVER.equals("0")) {
			txtAllPhotos.setVisibility(View.GONE);
			txtMyPhotos.setVisibility(View.GONE);
			txtAddAlbum.setVisibility(View.GONE);

			currentList = MYPHOTOS;
			lnrPhotosHeader.setVisibility(View.GONE);
			getMyPhots(true);
		} else {
			IN_PROFILE_COVER = "0";
			IN_GROUP_ID = "0";
			IN_GROUP_ADD_ALBUM = "0";
			IN_GROUP_UPLOAD_PHOTO = "0";
			lnrPhotosHeader.setVisibility(View.VISIBLE);
			getMyPhots(true);
		}
	}

	@Override
	protected void onResume() {
		super.onResume();
		if (IjoomerApplicationConfiguration.isReloadRequired() || JomPhotoDetailsActivity.isSetCoverChanged) {
			JomPhotoDetailsActivity.isSetCoverChanged = false;
			IjoomerApplicationConfiguration.setReloadRequired(false);
			setCurrentListData();
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {

		if (resultCode == Activity.RESULT_OK) {
			if (requestCode == GET_ADDRESS_FROM_MAP) {
				edtAlbumLocation.setText(((HashMap<String, String>) data.getSerializableExtra("MAP_ADDRESSS_DATA")).get("address"));
			} else {
				super.onActivityResult(requestCode, resultCode, data);
			}
		}

	}

	@Override
	public void setActionListeners() {

		imgMap.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				Intent intent = new Intent(JomAlbumsActivity.this, IjoomerMapAddress.class);
				startActivityForResult(intent, GET_ADDRESS_FROM_MAP);
			}
		});
		txtAddAlbum.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				if (IjoomerGlobalConfiguration.isPhotoUpload) {
					if (lnrCreateAlbum.getVisibility() == View.GONE) {
						txtAllPhotos.setTextColor(getResources().getColor(R.color.txt_color));
						txtMyPhotos.setTextColor(getResources().getColor(R.color.txt_color));
						txtAddAlbum.setTextColor(getResources().getColor(R.color.blue));
						edtAlbumName.setText(null);
						edtAlbumDescription.setText(null);
						try {

							new Thread(new Runnable() {

								@Override
								public void run() {
									address = IjoomerUtilities.getAddressFromLatLong(0, 0).getSubAdminArea();

									runOnUiThread(new Runnable() {

										@Override
										public void run() {
											edtAlbumLocation.setText(address);
										}
									});
								}
							}).start();
						} catch (Throwable e) {
						}

						lnrCreateAlbum.setVisibility(View.VISIBLE);
						lstAlbum.setVisibility(View.GONE);
					} else {
						lnrCreateAlbum.setVisibility(View.GONE);
						lstAlbum.setVisibility(View.VISIBLE);
						setHeaderTextColor();
					}
				} else {
					IjoomerUtilities.getCustomOkDialog(getString(R.string.album), getString(R.string.add_photo_permissin_disable), getString(R.string.ok),
							R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

								@Override
								public void NeutralMathod() {
								}
							});
				}
			}
		});

		btnAddAlbum.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				edtAlbumDescription.setText(null);
				try {

					new Thread(new Runnable() {

						@Override
						public void run() {
							address = IjoomerUtilities.getAddressFromLatLong(0, 0).getSubAdminArea();

							runOnUiThread(new Runnable() {

								@Override
								public void run() {
									edtAlbumLocation.setText(address);
								}
							});
						}
					}).start();
				} catch (Throwable e) {
				}
				lnrCreateAlbum.setVisibility(View.VISIBLE);
				lstAlbum.setVisibility(View.GONE);
			}
		});

		btnCreate.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				hideSoftKeyboard();
				if (edtAlbumName.getText().toString().trim().length() > 0) {

					final SeekBar proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
					Address address = IjoomerUtilities.getLatLongFromAddress(edtAlbumLocation.getText().toString().trim());
					providerAllPhotos.addAlbum("0", IN_GROUP_ID, edtAlbumName.getText().toString().trim(), edtAlbumDescription.getText().toString().trim(),
							address != null ? address.getLatitude() : 0, address != null ? address.getLongitude() : 0,
							getPrivacyCode(spnWhoCanSee.getSelectedItem().toString().trim()).toString(), new WebCallListener() {

								@Override
								public void onProgressUpdate(int progressCount) {
									proSeekBar.setProgress(progressCount);
								}

								@Override
								public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
									if (responseCode == 200) {
										updateHeader(providerAllPhotos.getNotificationData());
										lnrCreateAlbum.setVisibility(View.GONE);
										lstAlbum.setVisibility(View.VISIBLE);
										setCurrentListData();
										setHeaderTextColor();
									} else {
										IjoomerUtilities.getCustomOkDialog(getString(R.string.add_album),
												getString(getResources().getIdentifier("code" + responseCode, "string", getPackageName())), getString(R.string.ok),
												R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

													@Override
													public void NeutralMathod() {
														lnrCreateAlbum.setVisibility(View.GONE);
														lstAlbum.setVisibility(View.VISIBLE);
														setHeaderTextColor();
													}
												});
									}
								}

							});
				} else {
					edtAlbumName.setError(getString(R.string.validation_value_required));
				}
			}
		});
		btnCancle.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				lnrCreateAlbum.setVisibility(View.GONE);
				lstAlbum.setVisibility(View.VISIBLE);
				setHeaderTextColor();
			}
		});

		txtMyPhotos.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {

				if (!providerAllPhotos.isCalling()) {
					if (!currentList.equals(MYPHOTOS) || lnrCreateAlbum.getVisibility() == View.VISIBLE) {
						lnrCreateAlbum.setVisibility(View.GONE);
						lstAlbum.setVisibility(View.VISIBLE);

						txtAllPhotos.setTextColor(getResources().getColor(R.color.txt_color));
						txtMyPhotos.setTextColor(getResources().getColor(R.color.blue));
						txtAddAlbum.setTextColor(getResources().getColor(R.color.txt_color));

						currentList = MYPHOTOS;
						if (myAlbumList != null && myAlbumList.size() > 0) {
							prepareList(myAlbumList, false);
							lstAlbum.setAdapter(getListAdapter());
						} else {
							getMyPhots(true);
						}

					}
				}
			}
		});

		txtAllPhotos.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				if (!providerMyPhotos.isCalling()) {
					if (!currentList.equals(ALLPHOTOS) || lnrCreateAlbum.getVisibility() == View.VISIBLE) {
						lnrCreateAlbum.setVisibility(View.GONE);
						lstAlbum.setVisibility(View.VISIBLE);
						txtAllPhotos.setTextColor(getResources().getColor(R.color.blue));
						txtMyPhotos.setTextColor(getResources().getColor(R.color.txt_color));
						txtAddAlbum.setTextColor(getResources().getColor(R.color.txt_color));

						currentList = ALLPHOTOS;
						if (allAlbumList != null && allAlbumList.size() > 0) {
							prepareList(allAlbumList, false);
							lstAlbum.setAdapter(getListAdapter());
						} else {
							getAllPhotos(true);
						}
					}
				}
			}

		});

		lstAlbum.setOnScrollListener(new OnScrollListener() {

			@Override
			public void onScrollStateChanged(AbsListView view, int scrollState) {

			}

			@Override
			public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
				if ((firstVisibleItem + visibleItemCount) >= totalItemCount && totalItemCount > 1) {
					if (currentList.equals(MYPHOTOS)) {
						if (!providerMyPhotos.isCalling() && providerMyPhotos.hasNextPage()) {
							listFooterVisible();
							providerMyPhotos.getMyAlbumList(IN_GROUP_ID, new WebCallListener() {

								@Override
								public void onProgressUpdate(int progressCount) {
								}

								@Override
								public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
									listFooterInvisible();
									if (responseCode == 200) {
										updateHeader(providerAllPhotos.getNotificationData());

										if (data1 != null) {
											prepareList(data1, true);
										}
									} else {
										responseErrorMessageHandler(responseCode, false);
									}
								}
							});
						}
					} else if (currentList.equals(ALLPHOTOS)) {
						if (!providerAllPhotos.isCalling()) {
							listFooterVisible();
							providerAllPhotos.getAllAlbumList(IN_GROUP_ID, new WebCallListener() {

								@Override
								public void onProgressUpdate(int progressCount) {
								}

								@Override
								public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
									listFooterInvisible();
									if (responseCode == 200) {
										updateHeader(providerAllPhotos.getNotificationData());
										if (data1 != null) {
											prepareList(data1, true);
										}
									} else {
										responseErrorMessageHandler(responseCode, false);
									}
								}
							});
						}
					}
				}
			}
		});

	}

	@Override
	public void onCheckedChanged(RadioGroup arg0, int arg1) {

	}

	/**
	 * Class method
	 */

	private void getIntentData() {
		IN_USERID = getIntent().getStringExtra("IN_USERID") == null ? "0" : getIntent().getStringExtra("IN_USERID");
		IN_GROUP_ID = getIntent().getStringExtra("IN_GROUP_ID") == null ? "0" : getIntent().getStringExtra("IN_GROUP_ID");
		IN_GROUP_ADD_ALBUM = getIntent().getStringExtra("IN_GROUP_ADD_ALBUM") == null ? "0" : getIntent().getStringExtra("IN_GROUP_ADD_ALBUM");
		IN_GROUP_UPLOAD_PHOTO = getIntent().getStringExtra("IN_GROUP_UPLOAD_PHOTO") == null ? "0" : getIntent().getStringExtra("IN_GROUP_UPLOAD_PHOTO");
		IN_PROFILE_COVER = getIntent().getStringExtra("IN_PROFILE_COVER") == null ? "0" : getIntent().getStringExtra("IN_PROFILE_COVER");
	}

	public void listFooterVisible() {
		listFooter.setVisibility(View.VISIBLE);
	}

	public void listFooterInvisible() {
		listFooter.setVisibility(View.GONE);
	}

	private void getAllPhotos(final boolean isProgressShow) {

		if (isProgressShow) {
			proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
		}
		providerAllPhotos.getAllAlbumList(IN_GROUP_ID, new WebCallListener() {

			@Override
			public void onProgressUpdate(int progressCount) {
				if (isProgressShow) {
					proSeekBar.setProgress(progressCount);
				}
			}

			@Override
			public void onCallComplete(final int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
				if (responseCode == 200) {
					updateHeader(providerAllPhotos.getNotificationData());
					allAlbumList = data1;
					prepareList(allAlbumList, false);
					lstAlbum.setAdapter(getListAdapter());
					currentList = ALLPHOTOS;
				} else {
					if (responseCode == 204) {
						try {
							listData.clear();
							adapterAlbum.notifyDataSetChanged();
						} catch (Exception e) {
						}
					}
					IjoomerUtilities.getCustomOkDialog(getString(R.string.album), getString(getResources().getIdentifier("code" + responseCode, "string", getPackageName())),
							getString(R.string.ok), R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

								@Override
								public void NeutralMathod() {
									if (responseCode == 204) {
										if (!IN_GROUP_ID.equals("0") && !IN_GROUP_ADD_ALBUM.equals("0")) {
											edtAlbumDescription.setText(null);
											try {

												new Thread(new Runnable() {

													@Override
													public void run() {
														address = IjoomerUtilities.getAddressFromLatLong(0, 0).getSubAdminArea();

														runOnUiThread(new Runnable() {

															@Override
															public void run() {
																edtAlbumLocation.setText(address);
															}
														});
													}
												}).start();
											} catch (Throwable e) {
											}
											lnrCreateAlbum.setVisibility(View.VISIBLE);
											lstAlbum.setVisibility(View.GONE);
										} else if (!IN_GROUP_ID.equals("0")) {
											finish();
										}
									}
								}
							});
				}

			}
		});
	}

	private void getMyPhots(final boolean isProgressShow) {

		if (isProgressShow) {
			proSeekBar = IjoomerUtilities.getLoadingDialog(getString(R.string.dialog_loading_sending_request));
		}
		providerMyPhotos.getMyAlbumList(IN_USERID, new WebCallListener() {

			@Override
			public void onProgressUpdate(int progressCount) {
				if (isProgressShow) {
					proSeekBar.setProgress(progressCount);
				}
			}

			@Override
			public void onCallComplete(int responseCode, String errorMessage, ArrayList<HashMap<String, String>> data1, Object data2) {
				if (responseCode == 200) {
					updateHeader(providerMyPhotos.getNotificationData());
					myAlbumList = data1;
					prepareList(data1, false);
					lstAlbum.setAdapter(getListAdapter());
					currentList = MYPHOTOS;
				} else {
					if (!IN_PROFILE_COVER.equals("0") && responseCode == 204) {
						if (IjoomerGlobalConfiguration.isPhotoUpload) {
							lnrCreateAlbum.setVisibility(View.VISIBLE);
							IjoomerUtilities.getCustomOkDialog(getString(R.string.album), getString(R.string.add_photo_permissin_disable), getString(R.string.ok),
									R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

										@Override
										public void NeutralMathod() {
											finish();
										}
									});
						}
					} else if (responseCode == 204 && (allAlbumList == null || allAlbumList.size() <= 0)) {
						txtAllPhotos.setTextColor(getResources().getColor(R.color.blue));
						txtMyPhotos.setTextColor(getResources().getColor(R.color.txt_color));
						txtAddAlbum.setTextColor(getResources().getColor(R.color.txt_color));
						getAllPhotos(true);
					} else {
						if (responseCode == 204) {
							listData.clear();
							if (adapterAlbum != null) {
								adapterAlbum.notifyDataSetChanged();
							}
						}
						responseErrorMessageHandler(responseCode, isProgressShow);
					}

				}
			}
		});
	}

	private void setHeaderTextColor() {
		if (currentList.equals(ALLPHOTOS)) {
			txtAllPhotos.setTextColor(getResources().getColor(R.color.blue));
			txtMyPhotos.setTextColor(getResources().getColor(R.color.txt_color));
			txtAddAlbum.setTextColor(getResources().getColor(R.color.txt_color));
		} else {
			txtAllPhotos.setTextColor(getResources().getColor(R.color.txt_color));
			txtMyPhotos.setTextColor(getResources().getColor(R.color.blue));
			txtAddAlbum.setTextColor(getResources().getColor(R.color.txt_color));
		}

	}

	private void setCurrentListData() {
		providerAllPhotos.restorePagingSettings();
		providerMyPhotos.restorePagingSettings();
		if (!IN_GROUP_ID.equals("0")) {
			getAllPhotos(false);
		} else {
			if (currentList.equals(ALLPHOTOS)) {
				myAlbumList = null;
				getAllPhotos(false);
			} else {
				allAlbumList = null;
				getMyPhots(false);
			}
		}
	}

	private void responseErrorMessageHandler(final int responseCode, final boolean finishActivityOnConnectionProblem) {
		IjoomerUtilities.getCustomOkDialog(getString(R.string.album), getString(getResources().getIdentifier("code" + responseCode, "string", getPackageName())),
				getString(R.string.ok), R.layout.ijoomer_ok_dialog, new CustomAlertNeutral() {

					@Override
					public void NeutralMathod() {
						if (responseCode == 599 && finishActivityOnConnectionProblem) {
							finish();
						}
					}
				});
	}

	private void prepareList(ArrayList<HashMap<String, String>> data, boolean append) {
		if (data != null) {
			if (!append) {
				listData.clear();
			}
			for (HashMap<String, String> hashMap : data) {
				SmartListItem item = new SmartListItem();
				item.setItemLayout(R.layout.jom_album_list_item);
				ArrayList<Object> obj = new ArrayList<Object>();
				obj.add(hashMap);
				item.setValues(obj);
				if (append) {
					adapterAlbum.add(item);
				} else {
					listData.add(item);
				}
			}
		}

	}

	/**
	 * List adapter
	 * 
	 * @return
	 */
	private SmartListAdapterWithHolder getListAdapter() {

		adapterAlbum = new SmartListAdapterWithHolder(JomAlbumsActivity.this, R.layout.jom_album_list_item, listData, new ItemView() {

			@SuppressWarnings("unchecked")
			@Override
			public View setItemView(int position, View v, SmartListItem item, ViewHolder holder) {

				holder.imgArrow = (ImageView) v.findViewById(R.id.imgArrow);
				holder.imgAlbumAvatar = (ImageView) v.findViewById(R.id.imgAlbumAvatar);
				holder.txtAlbumTitle = (IjoomerTextView) v.findViewById(R.id.txtAlbumTitle);
				holder.txtAlbumPhotoCount = (IjoomerTextView) v.findViewById(R.id.txtAlbumPhotoCount);
				holder.txtAlbumDateLocation = (IjoomerTextView) v.findViewById(R.id.txtAlbumDateLocation);
				holder.txAlbumBy = (IjoomerTextView) v.findViewById(R.id.txAlbumBy);

				final HashMap<String, String> row = (HashMap<String, String>) item.getValues().get(0);

				androidQuery.id(holder.imgAlbumAvatar).image(row.get(THUMB), true, true, getDeviceWidth(), 0);
				holder.txtAlbumTitle.setText(row.get(NAME));
				holder.txtAlbumDateLocation.setMovementMethod(new ScrollingMovementMethod());
				if (row.get("location").trim().length() <= 0) {
					holder.txtAlbumDateLocation.setText(row.get(DATE));
				} else {
					holder.txtAlbumDateLocation.setText(row.get(DATE) + " @ " + row.get(LOCATION));
				}
				holder.txAlbumBy.setText(String.format(getString(R.string.by), row.get(USER_NAME).trim()));
				holder.txtAlbumPhotoCount.setText(String.format(getString(R.string.count_braket), Integer.parseInt(row.get(COUNT))));

				holder.txAlbumBy.setMovementMethod(LinkMovementMethod.getInstance());
				holder.txAlbumBy.setText(addClickablePart(Html.fromHtml(row.get(USER_NAME)), row), BufferType.SPANNABLE);

				holder.imgAlbumAvatar.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View arg0) {
					}
				});
				holder.txtAlbumTitle.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View arg0) {
						adapterNewintent(row);
					}
				});
				holder.txtAlbumPhotoCount.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View arg0) {
						adapterNewintent(row);
					}
				});
				holder.imgArrow.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View arg0) {

					}
				});
				return v;
			}

			@Override
			public View setItemView(int position, View v, SmartListItem item) {
				return null;
			}
		});
		return adapterAlbum;
	}

	private void adapterNewintent(HashMap<String, String> row) {
		try {
			loadNew(JomAlbumsDetailsActivity.class, JomAlbumsActivity.this, false, "IN_USERID", IN_USERID, "IN_ALBUM", row, "IN_GROUP_ID", IN_GROUP_ID, "IN_GROUP_UPLOAD_PHOTO",
					IN_GROUP_UPLOAD_PHOTO, "IN_PROFILE_COVER", IN_PROFILE_COVER);
		} catch (Throwable e) {
			e.printStackTrace();
		}
	}

}
